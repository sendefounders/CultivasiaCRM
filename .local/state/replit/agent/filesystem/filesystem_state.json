{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a CRM (Customer Relationship Management) software designed for the telemarketing company Cultivasia. The application manages telemarketing calls, tracks customer interactions, handles upsell opportunities, records transactions, and monitors agent performance. It features a Monday.com-inspired sidebar interface with role-based access for admins and agents.\n\nThe system provides comprehensive call management capabilities including call tracking, customer information management, upsell workflows, and transaction recording. Admins can manage products, users, and view system-wide analytics, while agents can handle their assigned calls and view their performance metrics.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe frontend is built using React with TypeScript and follows a component-based architecture. It uses Vite as the build tool and development server, providing fast hot module replacement and optimized builds.\n\n**UI Framework**: The application uses shadcn/ui components built on top of Radix UI primitives with Tailwind CSS for styling. This provides a consistent, accessible, and customizable design system.\n\n**State Management**: React Query (TanStack Query) handles server state management, caching, and synchronization. Local component state is managed using React hooks.\n\n**Routing**: Wouter provides lightweight client-side routing with protected routes that require authentication.\n\n**Authentication**: Context-based authentication system with protected routes that redirect unauthenticated users to the login page.\n\n## Backend Architecture\nThe backend follows a REST API architecture built with Express.js and TypeScript, providing a clear separation between API endpoints and business logic.\n\n**Session Management**: Uses Passport.js with local strategy for authentication and express-session for session management. Sessions are stored in PostgreSQL using connect-pg-simple.\n\n**Database Layer**: Drizzle ORM provides type-safe database operations with PostgreSQL. The schema defines users, calls, products, transactions, and call history with proper relationships.\n\n**Security**: Password hashing uses Node.js crypto module with scrypt for secure password storage. Role-based access control distinguishes between admin and agent permissions.\n\n**File Upload**: Multer middleware handles CSV file uploads for bulk call imports with validation and error handling.\n\n## Data Storage\n**Primary Database**: PostgreSQL database stores all application data including user accounts, call records, product catalog, transactions, and call history.\n\n**Database Schema**: Well-structured relational schema with proper foreign key relationships and enums for status tracking. Uses UUID primary keys and timestamps for audit trails.\n\n**Session Store**: PostgreSQL-backed session storage ensures session persistence across server restarts and supports horizontal scaling.\n\n## Authentication and Authorization\n**Authentication Method**: Custom username/password authentication using Passport.js local strategy. No third-party SSO integration to maintain simplicity.\n\n**Password Security**: Passwords are hashed using scrypt with random salts for security. Timing-safe comparison prevents timing attacks.\n\n**Role System**: Two-tier role system with 'admin' and 'agent' roles. Admins have full system access while agents can only manage their assigned calls.\n\n**Session Security**: Secure session configuration with proper cookie settings and CSRF protection considerations.\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: PostgreSQL database service for data persistence\n- **@neondatabase/serverless**: Serverless PostgreSQL client for database connections\n\n## UI Component Libraries\n- **Radix UI**: Comprehensive set of low-level UI primitives for building the component system\n- **shadcn/ui**: Pre-built component library based on Radix UI with Tailwind CSS styling\n- **Tailwind CSS**: Utility-first CSS framework for responsive design and theming\n\n## Development Tools\n- **Vite**: Fast build tool and development server with TypeScript support\n- **TypeScript**: Type safety across the entire application stack\n- **Drizzle ORM**: Type-safe database toolkit for PostgreSQL operations\n- **React Query**: Server state management and caching solution\n\n## Authentication & Security\n- **Passport.js**: Authentication middleware with local strategy implementation\n- **express-session**: Session management middleware for Express.js\n- **connect-pg-simple**: PostgreSQL session store for persistent sessions\n\n## File Processing\n- **Multer**: Multipart/form-data handling for CSV file uploads\n- **PapaParse**: CSV parsing library for processing call import files\n\n## Data Visualization\n- **Recharts**: React chart library for dashboard analytics and performance metrics","size_bytes":4893},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  // Validate stored password format\n  if (!stored || typeof stored !== 'string') {\n    return false;\n  }\n  \n  const parts = stored.split(\".\");\n  if (parts.length !== 2) {\n    // Invalid format - should be \"hash.salt\"\n    return false;\n  }\n  \n  const [hashed, salt] = parts;\n  if (!hashed || !salt) {\n    // Missing hash or salt\n    return false;\n  }\n  \n  try {\n    const hashedBuf = Buffer.from(hashed, \"hex\");\n    const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n    return timingSafeEqual(hashedBuf, suppliedBuf);\n  } catch (error) {\n    // Handle any crypto errors gracefully\n    console.error(\"Password comparison error:\", error);\n    return false;\n  }\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      const user = await storage.getUserByUsername(username);\n      if (!user || !(await comparePasswords(password, user.password))) {\n        return done(null, false);\n      } else {\n        return done(null, user);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    const user = await storage.getUser(id);\n    done(null, user);\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    const existingUser = await storage.getUserByUsername(req.body.username);\n    if (existingUser) {\n      return res.status(400).send(\"Username already exists\");\n    }\n\n    const user = await storage.createUser({\n      ...req.body,\n      password: await hashPassword(req.body.password),\n    });\n\n    req.login(user, (err) => {\n      if (err) return next(err);\n      res.status(201).json(user);\n    });\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n}\n","size_bytes":3165},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth } from \"./auth\";\nimport { z } from \"zod\";\nimport { insertCallSchema, insertProductSchema, insertTransactionSchema, updateTransactionSchema, insertUserSchema, updateUserSchema } from \"@shared/schema\";\nimport multer from \"multer\";\nimport Papa from \"papaparse\";\n\nconst upload = multer({ \n  storage: multer.memoryStorage(),\n  limits: { fileSize: 5 * 1024 * 1024 } // 5MB limit\n});\n\nexport function registerRoutes(app: Express): Server {\n  // Setup authentication routes\n  setupAuth(app);\n\n  // Middleware to check authentication\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    next();\n  };\n\n  const requireAdmin = (req: any, res: any, next: any) => {\n    if (!req.isAuthenticated() || req.user?.role !== 'admin') {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n    next();\n  };\n\n  // Products API\n  app.get(\"/api/products\", requireAuth, async (req, res) => {\n    try {\n      const products = await storage.getAllProducts();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.post(\"/api/products\", requireAdmin, async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(productData);\n      res.status(201).json(product);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid product data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.put(\"/api/products/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(id, updates);\n      \n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      res.json(product);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid product data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  // Calls API\n  app.get(\"/api/calls\", requireAuth, async (req, res) => {\n    try {\n      const filters = {\n        dateFrom: req.query.dateFrom ? new Date(req.query.dateFrom as string) : undefined,\n        dateTo: req.query.dateTo ? new Date(req.query.dateTo as string) : undefined,\n        status: req.query.status as string,\n        agentId: req.query.agentId as string,\n        callType: req.query.callType as string,\n        search: req.query.search as string,\n      };\n\n      // Filter out undefined values\n      Object.keys(filters).forEach(key => \n        filters[key as keyof typeof filters] === undefined && delete filters[key as keyof typeof filters]\n      );\n\n      const calls = await storage.getAllCalls(filters);\n      res.json(calls);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch calls\" });\n    }\n  });\n\n  app.post(\"/api/calls\", requireAuth, async (req, res) => {\n    try {\n      const callData = insertCallSchema.parse(req.body);\n      \n      // Check for duplicates\n      const duplicate = await storage.checkDuplicateCall(callData.phone, callData.date);\n      if (duplicate) {\n        return res.status(409).json({ message: \"Duplicate call found for this phone number and date\" });\n      }\n\n      const call = await storage.createCall(callData);\n      res.status(201).json(call);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid call data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create call\" });\n    }\n  });\n\n  app.put(\"/api/calls/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = insertCallSchema.partial().parse(req.body);\n      const call = await storage.updateCall(id, updates);\n      \n      if (!call) {\n        return res.status(404).json({ message: \"Call not found\" });\n      }\n      \n      res.json(call);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid call data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update call\" });\n    }\n  });\n\n  app.post(\"/api/calls/:id/assign\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { agentId } = req.body;\n      \n      const call = await storage.assignCallToAgent(id, agentId);\n      if (!call) {\n        return res.status(404).json({ message: \"Call not found\" });\n      }\n      \n      res.json(call);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to assign call\" });\n    }\n  });\n\n  // CSV Import\n  app.post(\"/api/calls/import\", requireAdmin, upload.single('csvFile'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No CSV file provided\" });\n      }\n\n      const csvText = req.file.buffer.toString('utf8');\n      const callType = req.body.callType || 'confirmation'; // Get call type from form data\n      \n      const parsed = Papa.parse(csvText, { \n        header: true, \n        skipEmptyLines: true,\n        transformHeader: (header) => header.trim().toLowerCase()\n      });\n\n      if (parsed.errors.length > 0) {\n        return res.status(400).json({ \n          message: \"CSV parsing errors\", \n          errors: parsed.errors \n        });\n      }\n\n      const results = {\n        success: 0,\n        errors: [] as any[],\n        duplicates: 0\n      };\n\n      // Get active agents for round-robin assignment\n      const agents = await storage.getAllAgents();\n      let agentIndex = 0;\n\n      for (let i = 0; i < parsed.data.length; i++) {\n        try {\n          const row = parsed.data[i] as any;\n          \n          // Map CSV columns to transaction data (now primary entity)\n          const transactionData = {\n            date: new Date(row.date || row.DATE),\n            customerName: row.name || row.NAME || '',\n            phone: row.phone || row.PHONE || '',\n            awb: row.awb || row.AWB || '',\n            orderSku: row.order || row.ORDER || '',\n            quantity: parseInt(row.qty || row.QTY || '1'),\n            currentPrice: String(parseFloat(row.price || row.PRICE || '0')),\n            shippingFee: String(parseFloat(row.sf || row.SF || '0')),\n            address: row.address || row.ADDRESS || '',\n            callType: callType as 'confirmation' | 'promo',\n            agentId: agents.length > 0 ? agents[agentIndex % agents.length].id : null,\n            status: 'new' as const,\n            isUpsell: false, // CSV imports are original orders, not upsells\n          };\n\n          // Validate required fields\n          if (!transactionData.customerName || !transactionData.phone || !transactionData.orderSku) {\n            results.errors.push({\n              row: i + 1,\n              message: \"Missing required fields (name, phone, order)\",\n              data: row\n            });\n            continue;\n          }\n\n          // Check for duplicates\n          const duplicate = await storage.checkDuplicateTransaction(transactionData.phone, transactionData.date);\n          if (duplicate) {\n            results.duplicates++;\n            continue;\n          }\n\n          await storage.createTransaction(transactionData);\n          results.success++;\n          agentIndex++;\n\n        } catch (error) {\n          results.errors.push({\n            row: i + 1,\n            message: error instanceof Error ? error.message : \"Unknown error\",\n            data: parsed.data[i]\n          });\n        }\n      }\n\n      res.json(results);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to import CSV\" });\n    }\n  });\n\n  // Transactions API (now primary entity for call list)\n  app.get(\"/api/transactions\", requireAuth, async (req, res) => {\n    try {\n      // Handle special cases for status filter\n      let statusFilter: string | undefined = req.query.status as string;\n      if (statusFilter === 'purchased') {\n        // \"Purchased\" means completed calls (customers who made purchases)\n        statusFilter = 'completed';\n      } else if (statusFilter === 'all') {\n        // \"All statuses\" means no status filter\n        statusFilter = undefined;\n      }\n      \n      const filters = {\n        dateFrom: req.query.dateFrom ? new Date(req.query.dateFrom as string) : undefined,\n        dateTo: req.query.dateTo ? new Date(req.query.dateTo as string) : undefined,\n        status: statusFilter,\n        agentId: req.query.agentId as string,\n        callType: req.query.callType as string,\n        search: req.query.search as string,\n        isUpsell: req.query.isUpsell ? req.query.isUpsell === 'true' : undefined,\n      };\n\n      // Filter out undefined values\n      Object.keys(filters).forEach(key => \n        filters[key as keyof typeof filters] === undefined && delete filters[key as keyof typeof filters]\n      );\n\n\n      const transactions = await storage.getAllTransactions(filters);\n      \n      \n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.get(\"/api/transactions/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const transaction = await storage.getTransaction(id);\n      \n      if (!transaction) {\n        return res.status(404).json({ message: \"Transaction not found\" });\n      }\n      \n      res.json(transaction);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch transaction\" });\n    }\n  });\n\n  app.put(\"/api/transactions/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = updateTransactionSchema.parse(req.body);\n      const transaction = await storage.updateTransaction(id, updates);\n      \n      if (!transaction) {\n        return res.status(404).json({ message: \"Transaction not found\" });\n      }\n      \n      res.json(transaction);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid transaction data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update transaction\" });\n    }\n  });\n\n  app.post(\"/api/transactions\", requireAuth, async (req, res) => {\n    try {\n      const transactionData = insertTransactionSchema.parse(req.body);\n      const transaction = await storage.createTransaction(transactionData);\n      res.status(201).json(transaction);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid transaction data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create transaction\" });\n    }\n  });\n\n  // Call History API\n  app.get(\"/api/calls/:id/history\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const history = await storage.getCallHistory(id);\n      res.json(history);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch call history\" });\n    }\n  });\n\n  // Dashboard Analytics\n  app.get(\"/api/dashboard/stats\", requireAuth, async (req, res) => {\n    try {\n      const agentId = req.user?.role === 'agent' ? req.user.id : req.query.agentId as string;\n      const stats = await storage.getDashboardStats(agentId);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/agent-performance\", requireAuth, async (req, res) => {\n    try {\n      const performance = await storage.getAgentPerformance();\n      res.json(performance);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch agent performance\" });\n    }\n  });\n\n  // Agents API (Admin only)\n  app.get(\"/api/agents\", requireAdmin, async (req, res) => {\n    try {\n      const agents = await storage.getAllAgents();\n      res.json(agents);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch agents\" });\n    }\n  });\n\n  app.post(\"/api/agents\", requireAdmin, async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse({ ...req.body, role: 'agent' });\n      const existingUser = await storage.getUserByUsername(userData.username);\n      \n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      const user = await storage.createUser(userData);\n      res.status(201).json(user);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid user data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create agent\" });\n    }\n  });\n\n  app.put(\"/api/agents/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = updateUserSchema.parse(req.body);\n      const user = await storage.updateUser(id, updates);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"Agent not found\" });\n      }\n      \n      res.json(user);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid user data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update agent\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":13809},"server/storage.ts":{"content":"import { \n  users, calls, products, transactions, callHistory,\n  type User, type InsertUser, type Call, type InsertCall,\n  type Product, type InsertProduct, type Transaction, type InsertTransaction,\n  type CallHistory, type InsertCallHistory\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, asc, and, gte, lte, sql, count, sum } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { pool } from \"./db\";\n\nconst PostgresSessionStore = connectPg(session);\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined>;\n  getAllAgents(): Promise<User[]>;\n\n  // Products\n  getAllProducts(): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  getProductBySku(sku: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, updates: Partial<InsertProduct>): Promise<Product | undefined>;\n\n  // Calls (legacy - keeping for backward compatibility)\n  getAllCalls(filters?: CallFilters): Promise<Call[]>;\n  getCall(id: string): Promise<Call | undefined>;\n  createCall(call: InsertCall): Promise<Call>;\n  updateCall(id: string, updates: Partial<InsertCall>): Promise<Call | undefined>;\n  assignCallToAgent(callId: string, agentId: string): Promise<Call | undefined>;\n  getCallsByAgent(agentId: string): Promise<Call[]>;\n  checkDuplicateCall(phone: string, date: Date): Promise<Call | undefined>;\n\n  // Transactions (now primary entity)\n  getAllTransactions(filters?: TransactionFilters): Promise<Transaction[]>;\n  getTransaction(id: string): Promise<Transaction | undefined>;\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  updateTransaction(id: string, updates: Partial<InsertTransaction>): Promise<Transaction | undefined>;\n  assignTransactionToAgent(transactionId: string, agentId: string): Promise<Transaction | undefined>;\n  getTransactionsByAgent(agentId: string): Promise<Transaction[]>;\n  checkDuplicateTransaction(phone: string, date: Date): Promise<Transaction | undefined>;\n\n  // Call History (now references transactions)\n  getCallHistory(callId: string): Promise<CallHistory[]>;\n  getTransactionHistory(transactionId: string): Promise<CallHistory[]>;\n  addCallHistory(history: InsertCallHistory): Promise<CallHistory>;\n\n  // Analytics\n  getDashboardStats(agentId?: string): Promise<DashboardStats>;\n  getAgentPerformance(): Promise<AgentPerformance[]>;\n\n  sessionStore: any;\n}\n\nexport interface CallFilters {\n  dateFrom?: Date;\n  dateTo?: Date;\n  status?: string;\n  agentId?: string;\n  callType?: string;\n  search?: string;\n}\n\nexport interface TransactionFilters {\n  dateFrom?: Date;\n  dateTo?: Date;\n  status?: string;\n  agentId?: string;\n  callType?: string;\n  search?: string;\n  isUpsell?: boolean;\n}\n\nexport interface DashboardStats {\n  totalCallsToday: number;\n  successfulUpsells: number;\n  revenueToday: number;\n  conversionRate: number;\n  callsByStatus: { status: string; count: number }[];\n  revenueByDay: { date: string; revenue: number }[];\n}\n\nexport interface AgentPerformance {\n  agent: User;\n  callsHandled: number;\n  upsellsClosed: number;\n  conversionRate: number;\n  revenue: number;\n  averageHandlingTime: number;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: any;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({ \n      pool, \n      createTableIfMissing: true \n    });\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const [user] = await db.update(users).set(updates).where(eq(users.id, id)).returning();\n    return user || undefined;\n  }\n\n  async getAllAgents(): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.role, 'agent')).orderBy(asc(users.username));\n  }\n\n  // Products\n  async getAllProducts(): Promise<Product[]> {\n    return await db.select().from(products).orderBy(asc(products.sku));\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product || undefined;\n  }\n\n  async getProductBySku(sku: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.sku, sku));\n    return product || undefined;\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await db.insert(products).values(product).returning();\n    return newProduct;\n  }\n\n  async updateProduct(id: string, updates: Partial<InsertProduct>): Promise<Product | undefined> {\n    const [product] = await db.update(products).set(updates).where(eq(products.id, id)).returning();\n    return product || undefined;\n  }\n\n  // Calls\n  async getAllCalls(filters?: CallFilters): Promise<Call[]> {\n    let query = db.select().from(calls);\n    \n    const conditions = [];\n    \n    if (filters?.dateFrom) {\n      conditions.push(gte(calls.date, filters.dateFrom));\n    }\n    if (filters?.dateTo) {\n      conditions.push(lte(calls.date, filters.dateTo));\n    }\n    if (filters?.status) {\n      conditions.push(eq(calls.status, filters.status as any));\n    }\n    if (filters?.agentId) {\n      conditions.push(eq(calls.agentId, filters.agentId));\n    }\n    if (filters?.callType) {\n      conditions.push(eq(calls.callType, filters.callType as any));\n    }\n    if (filters?.search) {\n      conditions.push(sql`${calls.customerName} ILIKE ${`%${filters.search}%`} OR ${calls.phone} ILIKE ${`%${filters.search}%`}`);\n    }\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n\n    return await query.orderBy(desc(calls.date));\n  }\n\n  async getCall(id: string): Promise<Call | undefined> {\n    const [call] = await db.select().from(calls).where(eq(calls.id, id));\n    return call || undefined;\n  }\n\n  async createCall(call: InsertCall): Promise<Call> {\n    const [newCall] = await db.insert(calls).values(call).returning();\n    return newCall;\n  }\n\n  async updateCall(id: string, updates: Partial<InsertCall>): Promise<Call | undefined> {\n    const updateData = {\n      ...updates,\n      updatedAt: new Date(),\n    };\n    const [call] = await db.update(calls).set(updateData).where(eq(calls.id, id)).returning();\n    return call || undefined;\n  }\n\n  async assignCallToAgent(callId: string, agentId: string): Promise<Call | undefined> {\n    return await this.updateCall(callId, { agentId });\n  }\n\n  async getCallsByAgent(agentId: string): Promise<Call[]> {\n    return await db.select().from(calls).where(eq(calls.agentId, agentId)).orderBy(desc(calls.date));\n  }\n\n  async checkDuplicateCall(phone: string, date: Date): Promise<Call | undefined> {\n    const dayStart = new Date(date);\n    dayStart.setHours(0, 0, 0, 0);\n    const dayEnd = new Date(date);\n    dayEnd.setHours(23, 59, 59, 999);\n\n    const [call] = await db.select().from(calls)\n      .where(and(\n        eq(calls.phone, phone),\n        gte(calls.date, dayStart),\n        lte(calls.date, dayEnd)\n      ));\n    return call || undefined;\n  }\n\n  // Transactions\n  async getAllTransactions(filters?: TransactionFilters): Promise<Transaction[]> {\n    let query = db.select().from(transactions);\n    \n    if (filters) {\n      const conditions = [];\n      \n      if (filters.dateFrom) {\n        conditions.push(gte(transactions.date, filters.dateFrom));\n      }\n      if (filters.dateTo) {\n        conditions.push(lte(transactions.date, filters.dateTo));\n      }\n      if (filters.status) {\n        conditions.push(eq(transactions.status, filters.status));\n      }\n      if (filters.agentId) {\n        conditions.push(eq(transactions.agentId, filters.agentId));\n      }\n      if (filters.callType) {\n        conditions.push(eq(transactions.callType, filters.callType));\n      }\n      if (filters.search) {\n        conditions.push(\n          sql`${transactions.customerName} ILIKE ${'%' + filters.search + '%'} OR ${transactions.phone} ILIKE ${'%' + filters.search + '%'} OR ${transactions.orderSku} ILIKE ${'%' + filters.search + '%'}`\n        );\n      }\n      if (filters.isUpsell !== undefined) {\n        conditions.push(eq(transactions.isUpsell, filters.isUpsell));\n      }\n      \n      if (conditions.length > 0) {\n        query = query.where(and(...conditions));\n      }\n    }\n    \n    return await query.orderBy(desc(transactions.createdAt));\n  }\n  \n  async getTransaction(id: string): Promise<Transaction | undefined> {\n    const [transaction] = await db.select().from(transactions).where(eq(transactions.id, id));\n    return transaction || undefined;\n  }\n\n  async createTransaction(transaction: InsertTransaction): Promise<Transaction> {\n    const [newTransaction] = await db.insert(transactions).values(transaction).returning();\n    return newTransaction;\n  }\n  \n  async updateTransaction(id: string, updates: Partial<InsertTransaction>): Promise<Transaction | undefined> {\n    // Enforce data consistency between status and timestamps\n    const consistentUpdates = this.enforceStatusTimestampConsistency(updates);\n    \n    const [updatedTransaction] = await db.update(transactions)\n      .set({ ...consistentUpdates, updatedAt: new Date() })\n      .where(eq(transactions.id, id))\n      .returning();\n    return updatedTransaction || undefined;\n  }\n\n  private enforceStatusTimestampConsistency(updates: Partial<InsertTransaction>): Partial<InsertTransaction> {\n    const result = { ...updates };\n    \n    // If status is being set to 'new', clear all call-related timestamps\n    if (updates.status === 'new') {\n      result.callStartedAt = null;\n      result.callEndedAt = null;\n      result.callDuration = null;\n    }\n    \n    // If status is being set to 'in_progress', ensure callStartedAt is set\n    if (updates.status === 'in_progress' && !updates.callStartedAt) {\n      result.callStartedAt = new Date();\n    }\n    \n    // If status is being set to completed/called/unattended/callback, ensure callEndedAt is set\n    if (['called', 'completed', 'unattended', 'callback'].includes(updates.status as string)) {\n      if (!updates.callEndedAt) {\n        result.callEndedAt = new Date();\n      }\n    }\n    \n    return result;\n  }\n  \n  async assignTransactionToAgent(transactionId: string, agentId: string): Promise<Transaction | undefined> {\n    return await this.updateTransaction(transactionId, { agentId });\n  }\n  \n  async checkDuplicateTransaction(phone: string, date: Date): Promise<Transaction | undefined> {\n    const dayStart = new Date(date);\n    dayStart.setHours(0, 0, 0, 0);\n    const dayEnd = new Date(date);\n    dayEnd.setHours(23, 59, 59, 999);\n\n    const [transaction] = await db.select().from(transactions)\n      .where(and(\n        eq(transactions.phone, phone),\n        gte(transactions.date, dayStart),\n        lte(transactions.date, dayEnd)\n      ));\n    return transaction || undefined;\n  }\n\n  // Legacy method - transactions no longer reference calls\n  async getTransactionsByCall(callId: string): Promise<Transaction[]> {\n    // This method is kept for backward compatibility but returns empty array\n    // since transactions are now the primary entity\n    return [];\n  }\n\n  async getTransactionsByAgent(agentId: string): Promise<Transaction[]> {\n    return await db.select().from(transactions).where(eq(transactions.agentId, agentId)).orderBy(desc(transactions.createdAt));\n  }\n\n  // Call History\n  async getCallHistory(callId: string): Promise<CallHistory[]> {\n    // Legacy method - kept for backward compatibility\n    return [];\n  }\n  \n  async getTransactionHistory(transactionId: string): Promise<CallHistory[]> {\n    return await db.select().from(callHistory).where(eq(callHistory.transactionId, transactionId)).orderBy(desc(callHistory.createdAt));\n  }\n\n  async addCallHistory(history: InsertCallHistory): Promise<CallHistory> {\n    const [newHistory] = await db.insert(callHistory).values(history).returning();\n    return newHistory;\n  }\n\n  // Analytics (now based on transactions as primary entity)\n  async getDashboardStats(agentId?: string): Promise<DashboardStats> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    // Base conditions for transactions\n    const baseConditions = [\n      gte(transactions.date, today),\n      lte(transactions.date, tomorrow)\n    ];\n\n    if (agentId) {\n      baseConditions.push(eq(transactions.agentId, agentId));\n    }\n\n    // Total calls today (from transactions)\n    const [callsResult] = await db.select({ count: count() })\n      .from(transactions)\n      .where(and(...baseConditions));\n\n    // Successful upsells today\n    const [upsellsResult] = await db.select({ count: count() })\n      .from(transactions)\n      .where(and(\n        gte(transactions.date, today),\n        lte(transactions.date, tomorrow),\n        eq(transactions.isUpsell, true),\n        ...(agentId ? [eq(transactions.agentId, agentId)] : [])\n      ));\n\n    // Revenue today (from upsells only)\n    const [revenueResult] = await db.select({ \n      total: sum(transactions.revenue) \n    })\n      .from(transactions)\n      .where(and(\n        gte(transactions.date, today),\n        lte(transactions.date, tomorrow),\n        eq(transactions.isUpsell, true),\n        ...(agentId ? [eq(transactions.agentId, agentId)] : [])\n      ));\n\n    // Calls by status (from transactions)\n    const statusResults = await db.select({\n      status: transactions.status,\n      count: count()\n    })\n      .from(transactions)\n      .where(and(...baseConditions))\n      .groupBy(transactions.status);\n\n    // Revenue by day (last 7 days)\n    const sevenDaysAgo = new Date();\n    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n\n    const revenueByDay = await db.select({\n      date: sql<string>`DATE(${transactions.date})`,\n      revenue: sum(transactions.revenue)\n    })\n      .from(transactions)\n      .where(and(\n        gte(transactions.date, sevenDaysAgo),\n        eq(transactions.isUpsell, true),\n        ...(agentId ? [eq(transactions.agentId, agentId)] : [])\n      ))\n      .groupBy(sql`DATE(${transactions.date})`)\n      .orderBy(sql`DATE(${transactions.date})`);\n\n    const totalCallsToday = callsResult.count || 0;\n    const successfulUpsells = upsellsResult.count || 0;\n    const conversionRate = totalCallsToday > 0 ? (successfulUpsells / totalCallsToday) * 100 : 0;\n\n    return {\n      totalCallsToday,\n      successfulUpsells,\n      revenueToday: Number(revenueResult.total) || 0,\n      conversionRate: Math.round(conversionRate * 100) / 100,\n      callsByStatus: statusResults.map(r => ({ status: r.status, count: r.count })),\n      revenueByDay: revenueByDay.map(r => ({ \n        date: r.date, \n        revenue: Number(r.revenue) || 0 \n      }))\n    };\n  }\n\n  async getAgentPerformance(): Promise<AgentPerformance[]> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const agentStats = await db.select({\n      agentId: users.id,\n      username: users.username,\n      role: users.role,\n      callsHandled: count(calls.id),\n      upsellsClosed: sql<number>`COUNT(CASE WHEN ${transactions.isUpsell} = true THEN 1 END)`,\n      revenue: sum(transactions.revenue),\n      avgHandlingTime: sql<number>`AVG(EXTRACT(EPOCH FROM (${calls.callEndedAt} - ${calls.callStartedAt})) / 60)`,\n    })\n      .from(users)\n      .leftJoin(calls, eq(users.id, calls.agentId))\n      .leftJoin(transactions, eq(calls.id, transactions.callId))\n      .where(and(\n        eq(users.role, 'agent'),\n        eq(users.isActive, true)\n      ))\n      .groupBy(users.id, users.username, users.role)\n      .orderBy(desc(sql`COUNT(${transactions.id})`));\n\n    return agentStats.map(stat => ({\n      agent: {\n        id: stat.agentId,\n        username: stat.username,\n        role: stat.role,\n      } as User,\n      callsHandled: stat.callsHandled || 0,\n      upsellsClosed: Number(stat.upsellsClosed) || 0,\n      conversionRate: stat.callsHandled > 0 ? \n        Math.round((Number(stat.upsellsClosed) / stat.callsHandled) * 10000) / 100 : 0,\n      revenue: Number(stat.revenue) || 0,\n      averageHandlingTime: Math.round((Number(stat.avgHandlingTime) || 0) * 100) / 100,\n    }));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":16907},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, decimal, boolean, pgEnum } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const userRoleEnum = pgEnum('user_role', ['admin', 'agent']);\nexport const callStatusEnum = pgEnum('call_status', ['new', 'in_progress', 'called', 'unattended', 'callback', 'completed']);\nexport const callTypeEnum = pgEnum('call_type', ['confirmation', 'promo']);\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: userRoleEnum(\"role\").notNull().default('agent'),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sku: text(\"sku\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  units: integer(\"units\").notNull().default(1),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const calls = pgTable(\"calls\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  date: timestamp(\"date\").notNull(),\n  customerName: text(\"customer_name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  awb: text(\"awb\"),\n  orderSku: text(\"order_sku\").notNull(),\n  quantity: integer(\"quantity\").notNull().default(1),\n  currentPrice: decimal(\"current_price\", { precision: 10, scale: 2 }).notNull(),\n  shippingFee: decimal(\"shipping_fee\", { precision: 10, scale: 2 }),\n  address: text(\"address\"),\n  status: callStatusEnum(\"status\").notNull().default('new'),\n  callType: callTypeEnum(\"call_type\").notNull().default('confirmation'),\n  agentId: varchar(\"agent_id\").references(() => users.id),\n  callStartedAt: timestamp(\"call_started_at\"),\n  callEndedAt: timestamp(\"call_ended_at\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  // Original CSV data fields\n  date: timestamp(\"date\").notNull(),\n  customerName: text(\"customer_name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  awb: text(\"awb\"),\n  orderSku: text(\"order_sku\").notNull(),\n  quantity: integer(\"quantity\").notNull().default(1),\n  currentPrice: decimal(\"current_price\", { precision: 10, scale: 2 }).notNull(),\n  shippingFee: decimal(\"shipping_fee\", { precision: 10, scale: 2 }),\n  address: text(\"address\"),\n  // Call management fields\n  status: callStatusEnum(\"status\").notNull().default('new'),\n  callType: callTypeEnum(\"call_type\").notNull().default('confirmation'),\n  agentId: varchar(\"agent_id\").references(() => users.id),\n  callStartedAt: timestamp(\"call_started_at\"),\n  callEndedAt: timestamp(\"call_ended_at\"),\n  callDuration: integer(\"call_duration\"), // Duration in seconds\n  callRemarks: text(\"call_remarks\"),\n  // Upsell fields (nullable for original orders)\n  originalOrderSku: text(\"original_order_sku\"),\n  originalPrice: decimal(\"original_price\", { precision: 10, scale: 2 }),\n  newOrderSku: text(\"new_order_sku\"),\n  newPrice: decimal(\"new_price\", { precision: 10, scale: 2 }),\n  revenue: decimal(\"revenue\", { precision: 10, scale: 2 }),\n  isUpsell: boolean(\"is_upsell\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const callHistory = pgTable(\"call_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  transactionId: varchar(\"transaction_id\").notNull().references(() => transactions.id),\n  agentId: varchar(\"agent_id\").notNull().references(() => users.id),\n  action: text(\"action\").notNull(), // 'started', 'ended', 'upsell_offered', 'upsell_accepted', 'upsell_declined'\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  calls: many(calls),\n  transactions: many(transactions),\n  callHistory: many(callHistory),\n}));\n\nexport const callsRelations = relations(calls, ({ one, many }) => ({\n  agent: one(users, {\n    fields: [calls.agentId],\n    references: [users.id],\n  }),\n  transactions: many(transactions),\n  callHistory: many(callHistory),\n}));\n\nexport const transactionsRelations = relations(transactions, ({ one, many }) => ({\n  agent: one(users, {\n    fields: [transactions.agentId],\n    references: [users.id],\n  }),\n  callHistory: many(callHistory),\n}));\n\nexport const callHistoryRelations = relations(callHistory, ({ one }) => ({\n  transaction: one(transactions, {\n    fields: [callHistory.transactionId],\n    references: [transactions.id],\n  }),\n  agent: one(users, {\n    fields: [callHistory.agentId],\n    references: [users.id],\n  }),\n}));\n\n// Schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  role: true,\n});\n\nexport const updateUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  role: true,\n  isActive: true,\n}).partial();\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCallSchema = createInsertSchema(calls).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateTransactionSchema = insertTransactionSchema.extend({\n  callStartedAt: z.union([\n    z.date(),\n    z.string().datetime().transform(val => new Date(val))\n  ]).optional(),\n  callEndedAt: z.union([\n    z.date(),\n    z.string().datetime().transform(val => new Date(val))\n  ]).optional(),\n  date: z.union([\n    z.date(),\n    z.string().datetime().transform(val => new Date(val))\n  ]).optional(),\n}).partial();\n\nexport const insertCallHistorySchema = createInsertSchema(callHistory).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Call = typeof calls.$inferSelect;\nexport type InsertCall = z.infer<typeof insertCallSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type CallHistory = typeof callHistory.$inferSelect;\nexport type InsertCallHistory = z.infer<typeof insertCallHistorySchema>;\n","size_bytes":6969},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport Dashboard from \"@/pages/dashboard\";\nimport AuthPage from \"@/pages/auth-page\";\nimport CallList from \"@/pages/call-list\";\nimport Setup from \"@/pages/setup\";\nimport NotFound from \"@/pages/not-found\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <ProtectedRoute path=\"/\" component={Dashboard} />\n      <ProtectedRoute path=\"/call-list\" component={CallList} />\n      <ProtectedRoute path=\"/setup\" component={Setup} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1169},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/csv-import.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Upload, FileText, AlertCircle, CheckCircle } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ImportResult {\n  success: number;\n  errors: Array<{ row: number; message: string; data: any }>;\n  duplicates: number;\n}\n\ninterface CsvImportProps {\n  callType?: 'confirmation' | 'promo';\n  title?: string;\n  description?: string;\n}\n\nexport function CsvImport({ callType = 'confirmation', title, description }: CsvImportProps) {\n  const [file, setFile] = useState<File | null>(null);\n  const [importResult, setImportResult] = useState<ImportResult | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const importMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('csvFile', file);\n      formData.append('callType', callType);\n      \n      const response = await apiRequest('POST', '/api/transactions/import', formData);\n      return await response.json();\n    },\n    onSuccess: (result: ImportResult) => {\n      setImportResult(result);\n      queryClient.invalidateQueries({ queryKey: ['/api/transactions'] });\n      \n      if (result.success > 0) {\n        toast({\n          title: \"Import successful\",\n          description: `${result.success} calls imported successfully.`,\n        });\n      }\n      \n      if (result.errors.length > 0) {\n        toast({\n          title: \"Import completed with errors\",\n          description: `${result.errors.length} rows had errors. Check the results below.`,\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Import failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = event.target.files?.[0];\n    if (selectedFile && selectedFile.type === 'text/csv') {\n      setFile(selectedFile);\n      setImportResult(null);\n    } else {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select a CSV file.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleImport = () => {\n    if (file) {\n      importMutation.mutate(file);\n    }\n  };\n\n  const resetImport = () => {\n    setFile(null);\n    setImportResult(null);\n  };\n\n  return (\n    <Card data-testid=\"csv-import-card\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Upload className=\"h-5 w-5\" />\n          {title || 'Import Call List'}\n        </CardTitle>\n        <CardDescription>\n          {description || 'Upload a CSV file to import call data. Required columns: DATE, NAME, PHONE, ORDER, PRICE'}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"csv-file\">Select CSV File</Label>\n          <Input\n            id=\"csv-file\"\n            type=\"file\"\n            accept=\".csv\"\n            onChange={handleFileChange}\n            className=\"mt-2\"\n            data-testid=\"input-csv-file\"\n          />\n        </div>\n\n        {file && (\n          <Alert>\n            <FileText className=\"h-4 w-4\" />\n            <AlertDescription>\n              Ready to import: <strong>{file.name}</strong> ({(file.size / 1024).toFixed(1)} KB)\n            </AlertDescription>\n          </Alert>\n        )}\n\n        <div className=\"flex gap-2\">\n          <Button\n            onClick={handleImport}\n            disabled={!file || importMutation.isPending}\n            data-testid=\"button-import-csv\"\n          >\n            {importMutation.isPending ? \"Importing...\" : \"Import CSV\"}\n          </Button>\n          \n          {(file || importResult) && (\n            <Button\n              variant=\"outline\"\n              onClick={resetImport}\n              data-testid=\"button-reset-import\"\n            >\n              Reset\n            </Button>\n          )}\n        </div>\n\n        {importResult && (\n          <div className=\"space-y-4 mt-6\">\n            <div className=\"grid grid-cols-3 gap-4\">\n              <Alert>\n                <CheckCircle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  <strong>{importResult.success}</strong> successful imports\n                </AlertDescription>\n              </Alert>\n              \n              {importResult.errors.length > 0 && (\n                <Alert variant=\"destructive\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    <strong>{importResult.errors.length}</strong> errors\n                  </AlertDescription>\n                </Alert>\n              )}\n              \n              {importResult.duplicates > 0 && (\n                <Alert>\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    <strong>{importResult.duplicates}</strong> duplicates skipped\n                  </AlertDescription>\n                </Alert>\n              )}\n            </div>\n\n            {importResult.errors.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Import Errors</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n                    {importResult.errors.map((error, index) => (\n                      <Alert key={index} variant=\"destructive\" data-testid={`import-error-${index}`}>\n                        <AlertDescription>\n                          <strong>Row {error.row}:</strong> {error.message}\n                        </AlertDescription>\n                      </Alert>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6360},"client/src/components/customer-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Phone, PhoneOff, AlertTriangle, Calendar, ShoppingCart, Check, X } from \"lucide-react\";\nimport { Transaction, CallHistory, Product } from \"@shared/schema\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface CustomerModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  call: Transaction | null;\n  onEndCall: (callId: string, remarks?: string, duration?: number, hasOrdersPlacedThisCall?: boolean) => void;\n  onMarkUnattended: (callId: string, remarks?: string, duration?: number) => void;\n  onMarkCallback: (callId: string, remarks?: string, duration?: number) => void;\n  onAnswered: (callId: string) => void;\n  onStopTimer: () => number; // Returns the current timer duration\n  onAcceptUpsell: (callId: string, newProductSku: string, customPrice?: number, duration?: number) => void; // Upsell handler with duration\n  callTimer?: string;\n  isUpdating?: boolean; // Loading state for mutations\n}\n\nexport function CustomerModal({ \n  isOpen, \n  onClose, \n  call, \n  onEndCall, \n  onMarkUnattended,\n  onMarkCallback,\n  onAnswered,\n  onStopTimer,\n  onAcceptUpsell,\n  callTimer,\n  isUpdating = false\n}: CustomerModalProps) {\n  const { toast } = useToast();\n  const [remarks, setRemarks] = useState(\"\");\n  // Initialize callPhase based on call status - if in_progress, skip to answered phase\n  const [callPhase, setCallPhase] = useState<'initial' | 'answered'>(\n    call?.status === 'in_progress' ? 'answered' : 'initial'\n  );\n  \n  // Upsell state\n  const [showUpsellSection, setShowUpsellSection] = useState(false);\n  const [manualMode, setManualMode] = useState(false);\n  const [newProductSku, setNewProductSku] = useState(\"\");\n  const [newPrice, setNewPrice] = useState(\"\");\n  const [placedOrders, setPlacedOrders] = useState<Array<{sku: string, name: string, price: string}>>([]);\n\n  // Fetch products for upsell functionality\n  const { data: products } = useQuery<Product[]>({\n    queryKey: ['/api/products'],\n  });\n\n  // Get current and suggested products\n  const currentProduct = products?.find(p => p.sku === call?.orderSku);\n  const suggestedProduct = products?.find(p => p.sku !== call?.orderSku);\n  const hasCompleteProductData = currentProduct && suggestedProduct;\n\n  // Format currency helper\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-PH', {\n      style: 'currency',\n      currency: 'PHP',\n      minimumFractionDigits: 2,\n    }).format(amount);\n  };\n\n  // Calculate price difference for suggested upsell\n  const priceDifference = hasCompleteProductData && suggestedProduct && currentProduct\n    ? Number(suggestedProduct.price) - Number(currentProduct.price)\n    : 0;\n\n  // Sync callPhase with call status changes\n  useEffect(() => {\n    if (call?.status === 'in_progress') {\n      setCallPhase('answered');\n    } else {\n      setCallPhase('initial');\n    }\n  }, [call?.status]);\n\n  // Reset placed orders and notes when modal opens with a new call\n  useEffect(() => {\n    if (isOpen && call) {\n      setPlacedOrders([]);\n      setShowUpsellSection(false);\n      setManualMode(false);\n      setNewProductSku(\"\");\n      setNewPrice(\"\");\n      setRemarks(\"\"); // Reset call notes for each new customer\n      \n      // Reset call phase based on call status\n      if (call.status === 'in_progress') {\n        setCallPhase('answered');\n      } else {\n        setCallPhase('initial');\n      }\n    }\n  }, [isOpen, call?.id]);\n\n  // Helper to determine if call can still be acted upon\n  const isCallActionable = () => {\n    // Allow actions on all statuses except 'completed' - agents should be able to reopen calls\n    return call && call.status !== 'completed';\n  };\n\n  const handleAnsweredClick = () => {\n    if (call) {\n      setCallPhase('answered');\n      // Only trigger onAnswered for new calls, not already in-progress calls\n      if (call.status !== 'in_progress') {\n        onAnswered(call.id);\n      }\n    }\n  };\n\n  const handleEndCallClick = () => {\n    // Stop timer and capture duration when End Call is clicked\n    const duration = onStopTimer();\n    \n    // Check if any orders were placed during this call session\n    const hasOrdersPlacedThisCall = placedOrders.length > 0;\n    \n    // Immediately end the call with current remarks (no additional UI)\n    if (call) {\n      onEndCall(call.id, remarks, duration, hasOrdersPlacedThisCall);\n      onClose();\n    }\n  };\n\n  const handleCallbackClick = () => {\n    // Stop timer and capture duration when Callback is clicked\n    const duration = onStopTimer();\n    \n    if (call) {\n      // Use existing remarks from the top textarea and close modal immediately\n      onMarkCallback(call.id, remarks, duration);\n      onClose();\n      \n      // Show success toast\n      toast({\n        title: \"Callback Scheduled\",\n        description: \"Call has been marked for callback\",\n      });\n    }\n  };\n\n  const handleUnattendedClick = () => {\n    // Stop timer and capture duration when Unattended is clicked\n    const duration = onStopTimer();\n    \n    if (call) {\n      // Use existing remarks from the top textarea and close modal immediately\n      onMarkUnattended(call.id, remarks, duration);\n      onClose();\n      \n      // Show success toast\n      toast({\n        title: \"Call Marked as Unattended\",\n        description: \"Call has been marked as unattended\",\n      });\n    }\n  };\n\n  const handleNewOrderClick = () => {\n    // Show inline upsell section - timer continues running\n    setShowUpsellSection(true);\n  };\n\n  const handleAcceptSuggested = () => {\n    if (call && suggestedProduct) {\n      // Don't pass duration - timer continues running until End Call\n      onAcceptUpsell(call.id, suggestedProduct.sku, undefined, undefined);\n      \n      // Add to placed orders list\n      setPlacedOrders(prev => [...prev, {\n        sku: suggestedProduct.sku,\n        name: suggestedProduct.name,\n        price: suggestedProduct.price\n      }]);\n      \n      setShowUpsellSection(false);\n      // DO NOT close modal - agents can add more orders\n      toast({\n        title: \"Order Created\",\n        description: `Successfully created order for ${suggestedProduct.name}`,\n      });\n    }\n  };\n\n  const handleAcceptManual = () => {\n    if (call && newProductSku.trim() && newPrice.trim()) {\n      const price = parseFloat(newPrice);\n      if (!isNaN(price)) {\n        // Don't pass duration - timer continues running until End Call\n        onAcceptUpsell(call.id, newProductSku.trim(), price, undefined);\n        \n        // Add to placed orders list\n        setPlacedOrders(prev => [...prev, {\n          sku: newProductSku.trim(),\n          name: newProductSku.trim(), // Use SKU as name for manual entries\n          price: newPrice.trim()\n        }]);\n        \n        setShowUpsellSection(false);\n        setNewProductSku(\"\");\n        setNewPrice(\"\");\n        // DO NOT close modal - agents can add more orders\n        toast({\n          title: \"Order Created\",\n          description: `Successfully created order for ${newProductSku.trim()}`,\n        });\n      }\n    }\n  };\n\n  const handleCancelUpsell = () => {\n    setShowUpsellSection(false);\n    setManualMode(false);\n    setNewProductSku(\"\");\n    setNewPrice(\"\");\n  };\n\n  const { data: callHistory } = useQuery<CallHistory[]>({\n    queryKey: [\"/api/transactions\", call?.id, \"history\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/transactions/${call?.id}/history`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to fetch call history: ${response.statusText}`);\n      }\n      return response.json();\n    },\n    enabled: !!call?.id,\n  });\n\n  if (!call) return null;\n\n  const formatDateTime = (date: Date) => {\n    return new Intl.DateTimeFormat('en-PH', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    }).format(new Date(date));\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case 'new': return 'secondary';\n      case 'in_progress': return 'default';\n      case 'called': return 'secondary';\n      case 'unattended': return 'destructive';\n      case 'completed': return 'secondary';\n      default: return 'secondary';\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>\n      <DialogContent className=\"max-w-5xl max-h-[95vh] overflow-hidden\" data-testid=\"customer-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            Customer Information\n            <div className=\"flex items-center space-x-2\">\n              {callTimer && (\n                <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700\" data-testid=\"badge-call-timer\">\n                  ⏱️ {callTimer}\n                </Badge>\n              )}\n              <Badge variant={getStatusBadgeVariant(call.status)} data-testid=\"badge-call-status\">\n                {call.status.replace('_', ' ').toUpperCase()}\n              </Badge>\n            </div>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-2 gap-6 h-[70vh]\">\n          {/* Left Column - Customer Information */}\n          <div className=\"space-y-4 overflow-y-auto pr-2\">\n            {/* Customer Details */}\n            <div>\n              <h4 className=\"font-semibold text-foreground mb-3\">Customer Details</h4>\n              <div className=\"space-y-3\">\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Customer Name</label>\n                  <p className=\"text-lg font-semibold text-foreground mt-1\" data-testid=\"text-customer-name\">\n                    {call.customerName}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Phone Number</label>\n                  <p className=\"text-lg font-semibold text-foreground mt-1\" data-testid=\"text-customer-phone\">\n                    {call.phone}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Current Order</label>\n                  <p className=\"text-lg font-semibold text-foreground mt-1\" data-testid=\"text-customer-order\">\n                    {call.orderSku}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Current Price</label>\n                  <p className=\"text-lg font-semibold text-foreground mt-1\" data-testid=\"text-customer-price\">\n                    {formatCurrency(Number(call.currentPrice))}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* AWB Number */}\n            {call.awb && (\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">AWB Number</label>\n                <p className=\"text-foreground mt-1\" data-testid=\"text-customer-awb\">{call.awb}</p>\n              </div>\n            )}\n\n            {/* Address */}\n            {call.address && (\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">Address</label>\n                <p className=\"text-foreground mt-1\" data-testid=\"text-customer-address\">\n                  {call.address}\n                </p>\n              </div>\n            )}\n\n            {/* Call Remarks */}\n            {call.callRemarks && (\n              <div>\n                <h4 className=\"font-semibold text-foreground mb-3\">Previous Call Remarks</h4>\n                <div className=\"p-3 bg-secondary rounded-lg\">\n                  <p className=\"text-sm text-foreground\" data-testid=\"text-call-remarks\">\n                    {call.callRemarks}\n                  </p>\n                </div>\n              </div>\n            )}\n\n            {/* Call History */}\n            <div>\n              <h4 className=\"font-semibold text-foreground mb-3\">Call History</h4>\n              <div className=\"space-y-2\">\n                {callHistory && callHistory.length > 0 ? (\n                  callHistory.map((history, index) => (\n                    <div key={history.id} className=\"p-2 bg-secondary rounded-lg\" data-testid={`call-history-${index}`}>\n                      <div>\n                        <p className=\"text-xs font-medium text-foreground\">\n                          {formatDateTime(history.createdAt)}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Action: {history.action}\n                        </p>\n                        {history.notes && (\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            {history.notes}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-3 text-muted-foreground\">\n                    <p className=\"text-sm\">No call history available</p>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Orders Placed During This Call */}\n            {placedOrders.length > 0 && (\n              <div>\n                <h4 className=\"font-semibold text-foreground mb-3\">Orders Placed This Call</h4>\n                <div className=\"space-y-2\">\n                  {placedOrders.map((order, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-2 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg\" data-testid={`placed-order-${index}`}>\n                      <div>\n                        <p className=\"text-xs font-medium text-green-800 dark:text-green-300\">\n                          {order.name}\n                        </p>\n                        <p className=\"text-xs text-green-600 dark:text-green-400\">\n                          SKU: {order.sku}\n                        </p>\n                      </div>\n                      <div className=\"text-xs font-semibold text-green-800 dark:text-green-300\">\n                        {formatCurrency(Number(order.price))}\n                      </div>\n                    </div>\n                  ))}\n                  <div className=\"text-xs text-muted-foreground text-center pt-1\">\n                    {placedOrders.length} order{placedOrders.length !== 1 ? 's' : ''} placed during this call\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Right Column - Actions and Notes */}\n          <div className=\"space-y-4 overflow-y-auto pl-2\">\n            {/* Always-visible Call Notes */}\n            <div className=\"space-y-3\">\n              <Label htmlFor=\"live-call-notes\">Call Notes</Label>\n              <Textarea\n                id=\"live-call-notes\"\n                placeholder=\"Take notes during the call...\"\n                value={remarks}\n                onChange={(e) => setRemarks(e.target.value)}\n                className=\"min-h-[120px] resize-none border border-input\"\n                data-testid=\"textarea-live-notes\"\n              />\n            </div>\n\n            {/* Action Buttons */}\n            {isCallActionable() && (\n              <div className=\"space-y-4\">\n                {/* Initial Call Phase - Show Answered, Unattended, Callback, and New Order */}\n                {callPhase === 'initial' && (\n                  <div>\n                    <h4 className=\"font-semibold text-foreground mb-3\">Call Actions</h4>\n                    <div className=\"space-y-2\">\n                      <Button\n                        onClick={handleAnsweredClick}\n                        className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n                        data-testid=\"button-answered\"\n                      >\n                        <Phone className=\"h-4 w-4 mr-2\" />\n                        Answered\n                      </Button>\n                      \n                      {/* New Order Section - Available in initial phase too */}\n                      {!showUpsellSection ? (\n                        <Button\n                          onClick={handleNewOrderClick}\n                          className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n                          data-testid=\"button-new-order-initial\"\n                        >\n                          <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                          Add Order\n                        </Button>\n                      ) : null}\n                      \n                      <Button\n                        onClick={handleUnattendedClick}\n                        disabled={isUpdating}\n                        variant=\"secondary\"\n                        className=\"w-full bg-red-200 hover:bg-red-300 text-red-800 disabled:opacity-50\"\n                        data-testid=\"button-mark-unattended\"\n                      >\n                        <AlertTriangle className=\"h-4 w-4 mr-2\" />\n                        Unattended\n                      </Button>\n                      <Button\n                        onClick={handleCallbackClick}\n                        disabled={isUpdating}\n                        variant=\"secondary\"\n                        className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-white disabled:opacity-50\"\n                        data-testid=\"button-callback\"\n                      >\n                        <Phone className=\"h-4 w-4 mr-2\" />\n                        Callback\n                      </Button>\n                    </div>\n                  </div>\n                )}\n\n                {/* Upsell Section - Available in both phases */}\n                {showUpsellSection && (\n                  <div className=\"space-y-3 p-3 bg-blue-50 rounded-lg border border-blue-200\">\n                    <h5 className=\"font-medium text-foreground\">Add New Order</h5>\n                    \n                    {/* Current Order Info - Compact */}\n                    <div className=\"p-2 bg-white rounded text-xs\">\n                      <div className=\"space-y-1\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-muted-foreground\">Customer:</span>\n                          <span className=\"font-medium\">{call?.customerName}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-muted-foreground\">Current SKU:</span>\n                          <span className=\"font-medium\">{call?.orderSku}</span>\n                        </div>\n                        {currentProduct && (\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-muted-foreground\">Price:</span>\n                            <span className=\"font-medium\">{formatCurrency(Number(currentProduct.price))}</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Upsell Options */}\n                    {hasCompleteProductData && !manualMode && (\n                      <>\n                        {/* Suggested Upsell */}\n                        <div className=\"p-3 bg-green-50 rounded-lg border border-green-200\">\n                          <h5 className=\"font-medium text-green-800 mb-2\">Suggested Upsell</h5>\n                          <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                            <div>\n                              <p className=\"text-muted-foreground\">Product SKU</p>\n                              <p className=\"font-bold text-green-700\">{suggestedProduct!.sku}</p>\n                            </div>\n                            <div>\n                              <p className=\"text-muted-foreground\">Product Name</p>\n                              <p className=\"font-medium\">{suggestedProduct!.name}</p>\n                            </div>\n                            <div>\n                              <p className=\"text-muted-foreground\">New Price</p>\n                              <p className=\"font-bold text-green-700\">{formatCurrency(Number(suggestedProduct!.price))}</p>\n                            </div>\n                            <div>\n                              <p className=\"text-muted-foreground\">Additional Revenue</p>\n                              <p className=\"font-bold text-green-600\">+{formatCurrency(priceDifference)}</p>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        {/* Suggested Upsell Buttons */}\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            onClick={handleAcceptSuggested}\n                            className=\"flex-1\"\n                            data-testid=\"button-accept-suggested\"\n                          >\n                            <Check className=\"h-4 w-4 mr-2\" />\n                            Accept Suggested\n                          </Button>\n                          <Button\n                            onClick={() => setManualMode(true)}\n                            variant=\"outline\"\n                            className=\"flex-1\"\n                            data-testid=\"button-manual-entry\"\n                          >\n                            Manual Entry\n                          </Button>\n                        </div>\n                      </>\n                    )}\n\n                    {(manualMode || !hasCompleteProductData) && (\n                      <>\n                        {/* Manual Entry Form */}\n                        <div className=\"p-3 bg-orange-50 rounded-lg border border-orange-200\">\n                          <h5 className=\"font-medium text-orange-800 mb-3\">Manual Order Entry</h5>\n                          <div className=\"space-y-3\">\n                            <div>\n                              <Label htmlFor=\"new-sku\">Product SKU</Label>\n                              <Input\n                                id=\"new-sku\"\n                                value={newProductSku}\n                                onChange={(e) => setNewProductSku(e.target.value)}\n                                placeholder=\"Enter product SKU...\"\n                                data-testid=\"input-new-sku\"\n                              />\n                            </div>\n                            <div>\n                              <Label htmlFor=\"new-price\">Price (PHP)</Label>\n                              <Input\n                                id=\"new-price\"\n                                type=\"number\"\n                                value={newPrice}\n                                onChange={(e) => setNewPrice(e.target.value)}\n                                placeholder=\"Enter price...\"\n                                data-testid=\"input-new-price\"\n                              />\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Manual Entry Buttons */}\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            onClick={handleAcceptManual}\n                            disabled={!newProductSku.trim() || !newPrice.trim()}\n                            className=\"flex-1\"\n                            data-testid=\"button-accept-manual\"\n                          >\n                            <Check className=\"h-4 w-4 mr-2\" />\n                            Create Order\n                          </Button>\n                          {hasCompleteProductData && (\n                            <Button\n                              onClick={() => setManualMode(false)}\n                              variant=\"outline\"\n                              className=\"flex-1\"\n                              data-testid=\"button-back-suggested\"\n                            >\n                              Back to Suggested\n                            </Button>\n                          )}\n                        </div>\n                      </>\n                    )}\n\n                    {/* Cancel Button */}\n                    <div className=\"pt-2 border-t\">\n                      <Button\n                        onClick={handleCancelUpsell}\n                        variant=\"secondary\"\n                        className=\"w-full\"\n                        data-testid=\"button-cancel-upsell\"\n                      >\n                        <X className=\"h-4 w-4 mr-2\" />\n                        Cancel\n                      </Button>\n                    </div>\n                  </div>\n                )}\n\n              {/* Answered Phase - Show New Order, End Call, Callback, Unattended */}\n              {callPhase === 'answered' && (\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold text-foreground\">Call Actions</h4>\n                  \n                  {/* New Order Section */}\n                  {!showUpsellSection && (\n                    <Button\n                      onClick={handleNewOrderClick}\n                      className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n                      data-testid=\"button-new-order\"\n                    >\n                      <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                      New Order\n                    </Button>\n                  )}\n                  \n                  {/* Call End Options */}\n                  <div className=\"space-y-2\">\n                    <Button\n                      onClick={handleEndCallClick}\n                      className=\"w-full bg-red-600 hover:bg-red-700 text-white\"\n                      data-testid=\"button-save-end-call\"\n                    >\n                      <PhoneOff className=\"h-4 w-4 mr-2\" />\n                      Save & End Call\n                    </Button>\n                    <Button\n                      onClick={handleCallbackClick}\n                      disabled={isUpdating}\n                      className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-white disabled:opacity-50\"\n                      data-testid=\"button-callback-answered\"\n                    >\n                      <Calendar className=\"h-4 w-4 mr-2\" />\n                      Callback\n                    </Button>\n                    <Button\n                      onClick={handleUnattendedClick}\n                      disabled={isUpdating}\n                      variant=\"secondary\"\n                      className=\"w-full bg-red-200 hover:bg-red-300 text-red-800 disabled:opacity-50\"\n                      data-testid=\"button-unattended-answered\"\n                    >\n                      <AlertTriangle className=\"h-4 w-4 mr-2\" />\n                      Unattended\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n            </div>\n          )}\n\n\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":27514},"client/src/components/sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Phone, \n  BarChart3, \n  List, \n  Receipt, \n  Settings, \n  LogOut, \n  ChevronLeft, \n  ChevronRight,\n  User\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport function Sidebar() {\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const [location] = useLocation();\n  const { user, logoutMutation } = useAuth();\n\n  const navigation = [\n    { name: \"Dashboard\", href: \"/\", icon: BarChart3, id: \"dashboard\" },\n    { name: \"Call List\", href: \"/call-list\", icon: List, id: \"call-list\" },\n    { name: \"Setup\", href: \"/setup\", icon: Settings, id: \"setup\", adminOnly: true },\n  ];\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\n  };\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const filteredNavigation = navigation.filter(item => \n    !item.adminOnly || user?.role === 'admin'\n  );\n\n  return (\n    <aside \n      className={cn(\n        \"bg-white border-r border-border flex flex-col shadow-sm transition-all duration-300\",\n        isCollapsed ? \"w-20\" : \"w-72\"\n      )}\n      data-testid=\"sidebar\"\n    >\n      {/* Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <div className={cn(\"flex items-center space-x-3\", isCollapsed && \"justify-center\")}>\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <Phone className=\"h-5 w-5 text-primary-foreground\" />\n            </div>\n            {!isCollapsed && (\n              <div>\n                <h1 className=\"font-semibold text-lg text-foreground\">Cultivasia</h1>\n                <p className=\"text-xs text-muted-foreground\">CRM System</p>\n              </div>\n            )}\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setIsCollapsed(!isCollapsed)}\n            className=\"p-2\"\n            data-testid=\"button-toggle-sidebar\"\n          >\n            {isCollapsed ? (\n              <ChevronRight className=\"h-4 w-4 text-muted-foreground\" />\n            ) : (\n              <ChevronLeft className=\"h-4 w-4 text-muted-foreground\" />\n            )}\n          </Button>\n        </div>\n      </div>\n\n      {/* User Info */}\n      <div className=\"p-6 border-b border-border\">\n        <div className={cn(\"flex items-center space-x-3\", isCollapsed && \"justify-center\")}>\n          <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center\">\n            {user ? (\n              <span className=\"text-white font-medium text-sm\">\n                {getInitials(user.username)}\n              </span>\n            ) : (\n              <User className=\"h-5 w-5 text-white\" />\n            )}\n          </div>\n          {!isCollapsed && (\n            <div>\n              <p className=\"font-medium text-sm\" data-testid=\"text-username\">\n                {user?.username || \"User\"}\n              </p>\n              <p className=\"text-xs text-muted-foreground capitalize\" data-testid=\"text-user-role\">\n                {user?.role || \"Agent\"}\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 p-4\">\n        <ul className=\"space-y-2\">\n          {filteredNavigation.map((item) => {\n            const isActive = location === item.href;\n            const Icon = item.icon;\n            \n            return (\n              <li key={item.href}>\n                <Link href={item.href}>\n                  <a\n                    className={cn(\n                      \"flex items-center space-x-3 px-4 py-3 rounded-lg font-medium transition-colors\",\n                      isActive\n                        ? \"bg-primary text-primary-foreground\"\n                        : \"text-muted-foreground hover:bg-secondary hover:text-foreground\",\n                      isCollapsed && \"justify-center\"\n                    )}\n                    data-testid={`nav-${item.id}`}\n                  >\n                    <Icon className=\"h-5 w-5\" />\n                    {!isCollapsed && <span>{item.name}</span>}\n                  </a>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n\n      {/* Footer */}\n      <div className=\"p-4 border-t border-border\">\n        <Button\n          variant=\"ghost\"\n          onClick={handleLogout}\n          disabled={logoutMutation.isPending}\n          className={cn(\n            \"flex items-center space-x-3 px-4 py-3 rounded-lg text-muted-foreground hover:bg-secondary hover:text-foreground transition-colors w-full\",\n            isCollapsed && \"justify-center\"\n          )}\n          data-testid=\"button-logout\"\n        >\n          <LogOut className=\"h-5 w-5\" />\n          {!isCollapsed && <span>Logout</span>}\n        </Button>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":5085},"client/src/components/upsell-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Check, X, ShoppingCart } from \"lucide-react\";\nimport { Call, Product } from \"@shared/schema\";\nimport { useState } from \"react\";\n\ninterface UpsellModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  call: Call | null;\n  currentProduct: Product | null;\n  suggestedProduct: Product | null;\n  onAcceptUpsell: (callId: string, newProductSku: string, customPrice?: number) => void;\n  onDeclineUpsell: (callId: string) => void;\n}\n\nexport function UpsellModal({ \n  isOpen, \n  onClose, \n  call, \n  currentProduct, \n  suggestedProduct, \n  onAcceptUpsell, \n  onDeclineUpsell \n}: UpsellModalProps) {\n  const [manualMode, setManualMode] = useState(false);\n  const [newProductSku, setNewProductSku] = useState('');\n  const [newPrice, setNewPrice] = useState('');\n  \n  // Only require call data - products are optional for manual entry\n  if (!call) return null;\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-PH', {\n      style: 'currency',\n      currency: 'PHP',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  // Check if we have complete product data for automatic upsell\n  const hasCompleteProductData = currentProduct && suggestedProduct;\n  const priceDifference = hasCompleteProductData \n    ? Number(suggestedProduct.price) - Number(currentProduct.price) \n    : 0;\n\n  const handleAcceptSuggested = () => {\n    if (suggestedProduct) {\n      onAcceptUpsell(call.id, suggestedProduct.sku);\n      onClose();\n    }\n  };\n\n  const handleAcceptManual = () => {\n    if (newProductSku.trim() && newPrice.trim()) {\n      const price = parseFloat(newPrice);\n      if (!isNaN(price)) {\n        onAcceptUpsell(call.id, newProductSku.trim(), price);\n        onClose();\n      }\n    }\n  };\n\n  const handleDecline = () => {\n    onDeclineUpsell(call.id);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-lg\" data-testid=\"upsell-modal\">\n        <DialogHeader>\n          <DialogTitle>Upsell Opportunity</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Current Order Info */}\n          <div className=\"p-4 bg-gray-50 rounded-lg\">\n            <h4 className=\"font-semibold text-foreground mb-2\">Current Order</h4>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Customer</p>\n                <p className=\"font-medium\" data-testid=\"text-customer-name\">{call.customerName}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Current SKU</p>\n                <p className=\"font-medium\" data-testid=\"text-current-sku\">{call.orderSku}</p>\n              </div>\n              {currentProduct && (\n                <>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Product Name</p>\n                    <p className=\"font-medium\" data-testid=\"text-current-name\">{currentProduct.name}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Current Price</p>\n                    <p className=\"font-medium\" data-testid=\"text-current-price\">\n                      {formatCurrency(Number(currentProduct.price))}\n                    </p>\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n\n          {/* Upsell Options */}\n          <div className=\"space-y-4\">\n            {hasCompleteProductData && !manualMode && (\n              <>\n                {/* Suggested Upsell */}\n                <div className=\"p-4 bg-primary bg-opacity-10 rounded-lg border border-primary\">\n                  <h4 className=\"font-semibold text-foreground mb-2\">Suggested Upsell</h4>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Product SKU</p>\n                      <p className=\"font-bold text-primary\" data-testid=\"text-upsell-sku\">{suggestedProduct!.sku}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Product Name</p>\n                      <p className=\"font-medium\" data-testid=\"text-upsell-name\">{suggestedProduct!.name}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">New Price</p>\n                      <p className=\"font-bold text-primary\" data-testid=\"text-upsell-price\">\n                        {formatCurrency(Number(suggestedProduct!.price))}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Additional Revenue</p>\n                      <p className=\"font-bold text-green-600\" data-testid=\"text-price-difference\">\n                        +{formatCurrency(priceDifference)}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Suggested Upsell Buttons */}\n                <div className=\"flex space-x-3\">\n                  <Button\n                    onClick={handleAcceptSuggested}\n                    className=\"flex-1\"\n                    data-testid=\"button-accept-upsell\"\n                  >\n                    <Check className=\"h-4 w-4 mr-2\" />\n                    Accept Suggested Upsell\n                  </Button>\n                  <Button\n                    onClick={() => setManualMode(true)}\n                    variant=\"outline\"\n                    className=\"flex-1\"\n                    data-testid=\"button-manual-entry\"\n                  >\n                    <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                    Manual Entry\n                  </Button>\n                </div>\n              </>\n            )}\n\n            {(manualMode || !hasCompleteProductData) && (\n              <>\n                {/* Manual Entry Form */}\n                <div className=\"p-4 bg-orange-50 rounded-lg border border-orange-200\">\n                  <h4 className=\"font-semibold text-foreground mb-4\">Manual Order Entry</h4>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"new-sku\">Product SKU</Label>\n                      <Input\n                        id=\"new-sku\"\n                        value={newProductSku}\n                        onChange={(e) => setNewProductSku(e.target.value)}\n                        placeholder=\"Enter product SKU...\"\n                        data-testid=\"input-new-sku\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"new-price\">Price (PHP)</Label>\n                      <Input\n                        id=\"new-price\"\n                        type=\"number\"\n                        value={newPrice}\n                        onChange={(e) => setNewPrice(e.target.value)}\n                        placeholder=\"Enter price...\"\n                        data-testid=\"input-new-price\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Manual Entry Buttons */}\n                <div className=\"flex space-x-3\">\n                  <Button\n                    onClick={handleAcceptManual}\n                    disabled={!newProductSku.trim() || !newPrice.trim()}\n                    className=\"flex-1\"\n                    data-testid=\"button-accept-manual\"\n                  >\n                    <Check className=\"h-4 w-4 mr-2\" />\n                    Create Order\n                  </Button>\n                  {hasCompleteProductData && (\n                    <Button\n                      onClick={() => setManualMode(false)}\n                      variant=\"outline\"\n                      className=\"flex-1\"\n                      data-testid=\"button-back-suggested\"\n                    >\n                      Back to Suggested\n                    </Button>\n                  )}\n                </div>\n              </>\n            )}\n          </div>\n\n          {/* Decline Button */}\n          <div className=\"pt-4 border-t\">\n            <Button\n              onClick={handleDecline}\n              variant=\"secondary\"\n              className=\"w-full bg-gray-500 hover:bg-gray-600 text-white\"\n              data-testid=\"button-decline-upsell\"\n            >\n              <X className=\"h-4 w-4 mr-2\" />\n              No Upsell - Continue\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8879},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2832},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Component />\n}\n","size_bytes":675},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const isFormData = data instanceof FormData;\n  \n  const res = await fetch(url, {\n    method,\n    headers: isFormData ? {} : (data ? { \"Content-Type\": \"application/json\" } : {}),\n    body: isFormData ? data as FormData : (data ? JSON.stringify(data) : undefined),\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1487},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { Redirect } from \"wouter\";\nimport { Phone, BarChart3, Users, Zap } from \"lucide-react\";\n\nconst loginSchema = insertUserSchema.pick({ username: true, password: true });\nconst registerSchema = insertUserSchema;\n\ntype LoginData = z.infer<typeof loginSchema>;\ntype RegisterData = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"login\");\n\n  const loginForm = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: { username: \"\", password: \"\" },\n  });\n\n  const registerForm = useForm<RegisterData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: { username: \"\", password: \"\", role: \"agent\" },\n  });\n\n  // Redirect if already logged in (after hooks to avoid rules of hooks violation)\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const onLogin = (data: LoginData) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegister = (data: RegisterData) => {\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Left side - Authentication Forms */}\n      <div className=\"flex-1 flex items-center justify-center p-8 bg-background\">\n        <div className=\"w-full max-w-md space-y-6\">\n          <div className=\"text-center space-y-2\">\n            <div className=\"flex items-center justify-center space-x-2 mb-4\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                <Phone className=\"h-6 w-6 text-primary-foreground\" />\n              </div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Cultivasia</h1>\n            </div>\n            <p className=\"text-muted-foreground\">\n              Welcome to your telemarketing CRM platform\n            </p>\n          </div>\n\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"login\" data-testid=\"tab-login\">Sign In</TabsTrigger>\n              <TabsTrigger value=\"register\" data-testid=\"tab-register\">Sign Up</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"login\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Sign In</CardTitle>\n                  <CardDescription>\n                    Enter your credentials to access your account\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-username\">Username</Label>\n                      <Input\n                        id=\"login-username\"\n                        data-testid=\"input-login-username\"\n                        {...loginForm.register(\"username\")}\n                        placeholder=\"Enter your username\"\n                      />\n                      {loginForm.formState.errors.username && (\n                        <p className=\"text-sm text-destructive\">\n                          {loginForm.formState.errors.username.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-password\">Password</Label>\n                      <Input\n                        id=\"login-password\"\n                        data-testid=\"input-login-password\"\n                        type=\"password\"\n                        {...loginForm.register(\"password\")}\n                        placeholder=\"Enter your password\"\n                      />\n                      {loginForm.formState.errors.password && (\n                        <p className=\"text-sm text-destructive\">\n                          {loginForm.formState.errors.password.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      data-testid=\"button-login\"\n                      className=\"w-full\"\n                      disabled={loginMutation.isPending}\n                    >\n                      {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"register\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Create Account</CardTitle>\n                  <CardDescription>\n                    Create a new account to get started\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-username\">Username</Label>\n                      <Input\n                        id=\"register-username\"\n                        data-testid=\"input-register-username\"\n                        {...registerForm.register(\"username\")}\n                        placeholder=\"Choose a username\"\n                      />\n                      {registerForm.formState.errors.username && (\n                        <p className=\"text-sm text-destructive\">\n                          {registerForm.formState.errors.username.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-password\">Password</Label>\n                      <Input\n                        id=\"register-password\"\n                        data-testid=\"input-register-password\"\n                        type=\"password\"\n                        {...registerForm.register(\"password\")}\n                        placeholder=\"Create a secure password\"\n                      />\n                      {registerForm.formState.errors.password && (\n                        <p className=\"text-sm text-destructive\">\n                          {registerForm.formState.errors.password.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      data-testid=\"button-register\"\n                      className=\"w-full\"\n                      disabled={registerMutation.isPending}\n                    >\n                      {registerMutation.isPending ? \"Creating account...\" : \"Create Account\"}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Right side - Hero Section */}\n      <div className=\"flex-1 bg-gradient-to-br from-primary via-primary to-accent text-primary-foreground p-8 flex items-center justify-center\">\n        <div className=\"max-w-lg text-center space-y-6\">\n          <h2 className=\"text-4xl font-bold\">\n            Streamline Your Telemarketing Operations\n          </h2>\n          <p className=\"text-lg opacity-90\">\n            Manage calls, track upsells, monitor performance, and boost your team's productivity with our comprehensive CRM solution.\n          </p>\n          \n          <div className=\"grid grid-cols-2 gap-4 mt-8\">\n            <div className=\"space-y-2\">\n              <BarChart3 className=\"h-8 w-8 mx-auto opacity-80\" />\n              <h3 className=\"font-semibold\">Analytics Dashboard</h3>\n              <p className=\"text-sm opacity-75\">Real-time performance metrics</p>\n            </div>\n            <div className=\"space-y-2\">\n              <Phone className=\"h-8 w-8 mx-auto opacity-80\" />\n              <h3 className=\"font-semibold\">Call Management</h3>\n              <p className=\"text-sm opacity-75\">Efficient call tracking system</p>\n            </div>\n            <div className=\"space-y-2\">\n              <Zap className=\"h-8 w-8 mx-auto opacity-80\" />\n              <h3 className=\"font-semibold\">Smart Upselling</h3>\n              <p className=\"text-sm opacity-75\">Maximize revenue opportunities</p>\n            </div>\n            <div className=\"space-y-2\">\n              <Users className=\"h-8 w-8 mx-auto opacity-80\" />\n              <h3 className=\"font-semibold\">Team Management</h3>\n              <p className=\"text-sm opacity-75\">Agent performance tracking</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9246},"client/src/pages/call-list.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { CustomerModal } from \"@/components/customer-modal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\nimport { Search, Phone, Filter, Upload, StickyNote } from \"lucide-react\";\nimport { Transaction, Product } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CsvImport } from \"@/components/csv-import\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\nexport default function CallList() {\n  const [selectedCall, setSelectedCall] = useState<Transaction | null>(null);\n  const [showCustomerModal, setShowCustomerModal] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"\");\n  const [callTypeFilter, setCallTypeFilter] = useState(\"\");\n  const [callTimer, setCallTimer] = useState(0);\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [callStartTime, setCallStartTime] = useState<Date | null>(null);\n  \n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Timer effect\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (isTimerRunning) {\n      interval = setInterval(() => {\n        setCallTimer(prev => prev + 1);\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [isTimerRunning]);\n\n  const formatCallTimer = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const { data: calls, isLoading } = useQuery<Transaction[]>({\n    queryKey: [\"/api/transactions\", { statusFilter, callTypeFilter, searchTerm, agentId: user?.id }],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (statusFilter) params.append('status', statusFilter);\n      if (callTypeFilter) params.append('callType', callTypeFilter);\n      if (searchTerm) params.append('search', searchTerm);\n      if (user?.role === 'agent') {\n        params.append('agentId', user.id);\n      }\n      // Show all transactions (both original orders and upsells) in call list\n      \n      const response = await fetch(`/api/transactions?${params}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch transactions');\n      }\n      return response.json();\n    },\n  });\n\n  const { data: products } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const updateCallMutation = useMutation({\n    mutationFn: async ({ callId, updates }: { callId: string; updates: Partial<Transaction> }) => {\n      const response = await apiRequest('PUT', `/api/transactions/${callId}`, updates);\n      return await response.json();\n    },\n    onSuccess: () => {\n      // Invalidate all transaction queries regardless of parameters\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/transactions'],\n        exact: false // This ensures all variations are invalidated\n      });\n      toast({\n        title: \"Call updated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to update call\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createTransactionMutation = useMutation({\n    mutationFn: async (transactionData: any) => {\n      const response = await apiRequest('POST', '/api/transactions', transactionData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      // Invalidate all transaction queries regardless of parameters\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/transactions'],\n        exact: false // This ensures all variations are invalidated\n      });\n    },\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-PH', {\n      style: 'currency',\n      currency: 'PHP',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('en-PH', {\n      month: 'short',\n      day: 'numeric',\n    }).format(new Date(date));\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case 'new': return 'secondary';\n      case 'in_progress': return 'default';\n      case 'called': return 'secondary';\n      case 'unattended': return 'destructive';\n      case 'completed': return 'secondary';\n      default: return 'secondary';\n    }\n  };\n\n  const getDialButtonStyle = (status: string) => {\n    switch (status) {\n      case 'called':\n        return 'bg-gray-300 hover:bg-gray-400 text-gray-700 border-gray-300'; // Light Gray\n      case 'callback':\n        return 'bg-yellow-500 hover:bg-yellow-600 text-white border-yellow-500'; // Yellow\n      case 'unattended':\n        return 'bg-red-200 hover:bg-red-300 text-red-800 border-red-200'; // Washed out Red\n      case 'completed':\n        return 'bg-gray-300 hover:bg-gray-400 text-gray-700 border-gray-300'; // Light Gray for completed\n      default:\n        return 'bg-blue-600 hover:bg-blue-700 text-white border-blue-600'; // Default Blue (theme color)\n    }\n  };\n\n  const handleCallClick = (call: Transaction) => {\n    setSelectedCall(call);\n    \n    // Handle different call states\n    if (call.callDuration && call.callDuration > 0) {\n      // Completed call - show stored duration\n      setCallTimer(call.callDuration);\n      setIsTimerRunning(false);\n    } else if (call.status === 'in_progress' && call.callStartedAt) {\n      // In-progress call - resume timer from where it left off\n      const startTime = new Date(call.callStartedAt);\n      const elapsed = Math.floor((new Date().getTime() - startTime.getTime()) / 1000);\n      setCallTimer(elapsed);\n      setCallStartTime(startTime);\n      setIsTimerRunning(true);\n    } else {\n      // New call - timer not started yet\n      setCallTimer(0);\n      setIsTimerRunning(false);\n    }\n    \n    setShowCustomerModal(true);\n  };\n\n  const handleEndCall = async (callId: string, remarks?: string, duration?: number, hasOrdersPlacedThisCall = false) => {\n    // Use provided duration or current timer value\n    const finalDuration = duration !== undefined ? duration : callTimer;\n    \n    // Use the hasOrdersPlacedThisCall parameter to determine status\n    // Only mark as 'completed' (Purchased) if orders were actually placed during this call session\n    const finalStatus = hasOrdersPlacedThisCall ? 'completed' : 'called';\n    \n    try {\n      // Only fetch fresh data if orders were placed this call to preserve the order information\n      if (hasOrdersPlacedThisCall) {\n        const response = await fetch(`/api/transactions/${callId}`, {\n          credentials: 'include'\n        });\n        const freshCall = await response.json();\n        \n        updateCallMutation.mutate({\n          callId,\n          updates: { \n            // Preserve all existing order data from this call session\n            originalOrderSku: freshCall.originalOrderSku,\n            originalPrice: freshCall.originalPrice,\n            orderSku: freshCall.orderSku,\n            currentPrice: freshCall.currentPrice,\n            revenue: freshCall.revenue,\n            isUpsell: freshCall.isUpsell,\n            status: finalStatus,\n            date: new Date(), // Set current date for dashboard stats\n            callEndedAt: new Date(),\n            callDuration: finalDuration,\n            callRemarks: remarks || null\n          }\n        });\n      } else {\n        // No orders placed this call - just mark as 'called' without fetching order data\n        updateCallMutation.mutate({\n          callId,\n          updates: { \n            status: finalStatus,\n            date: new Date(), // Set current date for dashboard stats\n            callEndedAt: new Date(),\n            callDuration: finalDuration,\n            callRemarks: remarks || null\n          }\n        });\n      }\n    } catch (error) {\n      // Fallback - always use 'called' status if there's an error\n      console.error('Failed to fetch fresh call data:', error);\n      \n      updateCallMutation.mutate({\n        callId,\n        updates: { \n          status: 'called', // Default to 'called' if we can't verify data\n          date: new Date(), // Set current date for dashboard stats\n          callEndedAt: new Date(),\n          callDuration: finalDuration,\n          callRemarks: remarks || null\n        }\n      });\n    }\n    \n    setShowCustomerModal(false);\n  };\n\n  const handleMarkUnattended = (callId: string, remarks?: string, duration?: number) => {\n    // Use provided duration or current timer value\n    const finalDuration = duration !== undefined ? duration : callTimer;\n    \n    // Get the current call data to preserve order information\n    const call = calls?.find(c => c.id === callId);\n    \n    updateCallMutation.mutate({\n      callId,\n      updates: { \n        // Preserve all existing order data if it exists\n        ...(call?.originalOrderSku && {\n          originalOrderSku: call.originalOrderSku,\n          originalPrice: call.originalPrice,\n          orderSku: call.orderSku,\n          currentPrice: call.currentPrice,\n          revenue: call.revenue,\n          isUpsell: call.isUpsell\n        }),\n        // Update call completion data\n        status: 'unattended',\n        date: new Date(), // Set current date for dashboard stats\n        callEndedAt: new Date(),\n        callDuration: finalDuration,\n        callRemarks: remarks || null\n      }\n    }, {\n      onSuccess: () => {\n        toast({\n          title: \"Call Marked as Unattended\",\n          description: `Successfully marked ${call?.customerName || 'call'} as unattended.`,\n        });\n      },\n      onError: () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to mark call as unattended. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    });\n    setShowCustomerModal(false);\n  };\n\n  const handleMarkCallback = (callId: string, remarks?: string, duration?: number) => {\n    // Use provided duration or current timer value\n    const finalDuration = duration !== undefined ? duration : callTimer;\n    \n    // Get the current call data to preserve order information\n    const call = calls?.find(c => c.id === callId);\n    \n    updateCallMutation.mutate({\n      callId,\n      updates: { \n        // Preserve all existing order data if it exists\n        ...(call?.originalOrderSku && {\n          originalOrderSku: call.originalOrderSku,\n          originalPrice: call.originalPrice,\n          orderSku: call.orderSku,\n          currentPrice: call.currentPrice,\n          revenue: call.revenue,\n          isUpsell: call.isUpsell\n        }),\n        // Update call completion data\n        status: 'callback',\n        date: new Date(), // Set current date for dashboard stats\n        callEndedAt: new Date(),\n        callDuration: finalDuration,\n        callRemarks: remarks || null\n      }\n    }, {\n      onSuccess: () => {\n        toast({\n          title: \"Callback Scheduled\",\n          description: `Successfully scheduled callback for ${call?.customerName || 'customer'}.`,\n        });\n      },\n      onError: () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to schedule callback. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    });\n    setShowCustomerModal(false);\n  };\n\n  const handleAnswered = (callId: string) => {\n    // Start timer when \"Answered\" is pressed\n    const now = new Date();\n    setCallStartTime(now);\n    setCallTimer(0);\n    setIsTimerRunning(true);\n    \n    // Update status to in_progress and record call start time\n    updateCallMutation.mutate({\n      callId,\n      updates: { \n        status: 'in_progress',\n        date: new Date(), // Set current date for dashboard stats\n        callStartedAt: now,\n        agentId: user?.id\n      }\n    });\n  };\n\n  const handleStopTimer = () => {\n    // Stop timer and return current duration\n    setIsTimerRunning(false);\n    return callTimer;\n  };\n\n\n\n  const handleAcceptUpsell = (callId: string, newProductSku: string, customPrice?: number, duration?: number) => {\n    const call = calls?.find(c => c.id === callId);\n    const newProduct = products?.find(p => p.sku === newProductSku);\n    \n    if (call) {\n      // Use custom price if provided (manual entry), otherwise use product price\n      const finalPrice = customPrice !== undefined \n        ? customPrice.toString() \n        : newProduct?.price || '0';\n      \n      // During order placement, keep call in_progress so agent can continue call workflow\n      updateCallMutation.mutate({\n        callId: call.id,\n        updates: {\n          // Store original order info if not already stored\n          originalOrderSku: call.originalOrderSku || call.orderSku,\n          originalPrice: call.originalPrice || call.currentPrice,\n          // Update to new product\n          orderSku: newProductSku,\n          currentPrice: finalPrice,\n          // Calculate revenue\n          revenue: (Number(finalPrice) - Number(call.originalPrice || call.currentPrice)).toString(),\n          isUpsell: true,\n          // Keep call in_progress so agent can continue workflow (place more orders, end call, etc.)\n          status: 'in_progress',\n          date: new Date() // Set current date for dashboard stats\n          // Don't set callDuration or callEndedAt - timer should keep running\n        }\n      });\n      \n      // Don't reset timer state - let it keep running\n      \n      const productName = newProduct?.name || newProductSku;\n      toast({\n        title: \"Order Created\",\n        description: `Successfully created order for ${productName}`,\n      });\n    } else {\n      toast({\n        title: \"Error\",\n        description: \"Call data not found. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n\n  const filteredCalls = calls?.filter(call => {\n    const matchesSearch = searchTerm === \"\" || \n      call.customerName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      call.phone.includes(searchTerm);\n    \n    // Handle status filtering with special case for \"purchased\"\n    let matchesStatus = false;\n    if (statusFilter === \"\" || statusFilter === \"all\") {\n      matchesStatus = true;\n    } else if (statusFilter === \"purchased\") {\n      // \"Purchased\" means any completed call (customer made a purchase)\n      matchesStatus = call.status === 'completed';\n    } else {\n      matchesStatus = call.status === statusFilter;\n    }\n    \n    const matchesCallType = callTypeFilter === \"\" || callTypeFilter === \"all\" || call.callType === callTypeFilter;\n    \n    return matchesSearch && matchesStatus && matchesCallType;\n  });\n\n  const currentProduct = selectedCall ? products?.find(p => p.sku === selectedCall.orderSku) || null : null;\n  const suggestedProduct = products?.find(p => p.sku === 'AP2') || null; // Simple upsell logic\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        {/* Header */}\n        <header className=\"bg-white border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-foreground\">Call List</h2>\n              <p className=\"text-sm text-muted-foreground\">Manage and track customer calls</p>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button variant=\"outline\" data-testid=\"button-import-confirmation\">\n                    <Upload className=\"h-4 w-4 mr-2\" />\n                    Import Confirmation Calls\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle>Import Confirmation Calls</DialogTitle>\n                  </DialogHeader>\n                  <CsvImport \n                    callType=\"confirmation\"\n                    title=\"Import Confirmation Calls\"\n                    description=\"Upload a CSV file with confirmation calls. Required columns: DATE, NAME, PHONE, ORDER, PRICE\"\n                  />\n                </DialogContent>\n              </Dialog>\n              \n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-import-promotional\">\n                    <Upload className=\"h-4 w-4 mr-2\" />\n                    Import Promotional Calls\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle>Import Promotional Calls</DialogTitle>\n                  </DialogHeader>\n                  <CsvImport \n                    callType=\"promo\"\n                    title=\"Import Promotional Calls\"\n                    description=\"Upload a CSV file with promotional calls. Required columns: DATE, NAME, PHONE, ORDER, PRICE\"\n                  />\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </header>\n\n        {/* Filters */}\n        <div className=\"p-6 border-b border-border bg-gray-50\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search customers or phone numbers...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-calls\"\n              />\n            </div>\n            \n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All statuses</SelectItem>\n                <SelectItem value=\"new\">New</SelectItem>\n                <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                <SelectItem value=\"called\">Called</SelectItem>\n                <SelectItem value=\"unattended\">Unattended</SelectItem>\n                <SelectItem value=\"callback\">Callback</SelectItem>\n                <SelectItem value=\"purchased\">Purchased</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={callTypeFilter} onValueChange={setCallTypeFilter}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-call-type-filter\">\n                <SelectValue placeholder=\"Filter by call type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All types</SelectItem>\n                <SelectItem value=\"confirmation\">Confirmation</SelectItem>\n                <SelectItem value=\"promo\">Promo</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Call List Table */}\n        <div className=\"p-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                Call List\n                <span className=\"text-sm font-normal text-muted-foreground\">\n                  {filteredCalls?.length || 0} calls\n                </span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  Loading calls...\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Date</TableHead>\n                      <TableHead>Customer Name</TableHead>\n                      <TableHead>Phone</TableHead>\n                      <TableHead>Order</TableHead>\n                      <TableHead>Price</TableHead>\n                      <TableHead>Action</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredCalls?.map((call) => (\n                      <TableRow \n                        key={call.id} \n                        data-testid={`call-row-${call.id}`}\n                        className=\"cursor-pointer hover:bg-muted/50\"\n                        onClick={() => handleCallClick(call)}\n                      >\n                        <TableCell>{formatDate(call.date)}</TableCell>\n                        <TableCell className=\"font-medium\">\n                          <div className=\"flex items-center gap-2\">\n                            {call.customerName}\n                            {call.callRemarks && (\n                              <TooltipProvider>\n                                <Tooltip>\n                                  <TooltipTrigger>\n                                    <StickyNote className=\"h-4 w-4 text-blue-600\" data-testid={`note-icon-${call.id}`} />\n                                  </TooltipTrigger>\n                                  <TooltipContent>\n                                    <p className=\"max-w-xs\">{call.callRemarks}</p>\n                                  </TooltipContent>\n                                </Tooltip>\n                              </TooltipProvider>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>{call.phone}</TableCell>\n                        <TableCell>{call.orderSku}</TableCell>\n                        <TableCell>{formatCurrency(Number(call.currentPrice))}</TableCell>\n                        <TableCell>\n                          {(call.status === 'called' || call.status === 'completed' || call.status === 'unattended' || call.status === 'callback') ? (\n                            <Badge \n                              variant=\"secondary\"\n                              className={\n                                call.status === 'completed' ? 'bg-green-200 text-green-800 hover:bg-green-200' :\n                                call.status === 'called' ? 'bg-gray-200 text-gray-700 hover:bg-gray-200' :\n                                call.status === 'unattended' ? 'bg-red-200 text-red-800 hover:bg-red-200' :\n                                call.status === 'callback' ? 'bg-yellow-200 text-yellow-800 hover:bg-yellow-200' :\n                                'bg-gray-200 text-gray-700 hover:bg-gray-200'\n                              }\n                              data-testid={`status-${call.status}-${call.id}`}\n                            >\n                              {call.status === 'completed' ? 'Purchased' :\n                               call.status === 'called' ? 'Called' :\n                               call.status === 'unattended' ? 'Unattended' :\n                               call.status === 'callback' ? 'Callback' : 'Called'}\n                            </Badge>\n                          ) : (\n                            <Button\n                              size=\"sm\"\n                              onClick={() => handleCallClick(call)}\n                              className=\"bg-blue-600 hover:bg-blue-700 text-white border-blue-600\"\n                              data-testid={`button-dial-${call.id}`}\n                            >\n                              <Phone className=\"h-4 w-4 mr-2\" />\n                              Dial\n                            </Button>\n                          )}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Customer Modal */}\n        <CustomerModal\n          isOpen={showCustomerModal}\n          onClose={() => {\n            setIsTimerRunning(false);\n            // Don't reset timer - preserve duration for resume\n            setShowCustomerModal(false);\n          }}\n          call={selectedCall}\n          onEndCall={handleEndCall}\n          onMarkUnattended={handleMarkUnattended}\n          onMarkCallback={handleMarkCallback}\n          onAnswered={handleAnswered}\n          onStopTimer={handleStopTimer}\n          onAcceptUpsell={handleAcceptUpsell}\n          callTimer={formatCallTimer(callTimer)}\n          isUpdating={updateCallMutation.isPending}\n        />\n\n      </main>\n    </div>\n  );\n}\n","size_bytes":25355},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { Phone, TrendingUp, DollarSign, Percent, Search, Plus } from \"lucide-react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar } from 'recharts';\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useState, useMemo } from \"react\";\n\ninterface DashboardStats {\n  totalCallsToday: number;\n  successfulUpsells: number;\n  revenueToday: number;\n  conversionRate: number;\n  callsByStatus: { status: string; count: number }[];\n  revenueByDay: { date: string; revenue: number }[];\n}\n\ninterface AgentPerformance {\n  agent: { id: string; username: string; role: string };\n  callsHandled: number;\n  upsellsClosed: number;\n  conversionRate: number;\n  revenue: number;\n  averageHandlingTime: number;\n}\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const [dateFilter, setDateFilter] = useState(\"7\"); // Default to last 7 days\n\n  const { data: stats, isLoading: statsLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: agentPerformance, isLoading: performanceLoading } = useQuery<AgentPerformance[]>({\n    queryKey: [\"/api/dashboard/agent-performance\"],\n  });\n\n  // Filter chart data based on selected date range\n  const filteredChartData = useMemo(() => {\n    if (!stats?.revenueByDay) return [];\n    \n    const days = parseInt(dateFilter);\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - days);\n    \n    return stats.revenueByDay\n      .filter(item => new Date(item.date) >= cutoffDate)\n      .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n  }, [stats?.revenueByDay, dateFilter]);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-PH', {\n      style: 'currency',\n      currency: 'PHP',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        {/* Header */}\n        <header className=\"bg-white border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-foreground\">Dashboard</h2>\n              <p className=\"text-sm text-muted-foreground\">Monitor your telemarketing performance</p>\n            </div>\n          </div>\n        </header>\n\n        {/* Dashboard Content */}\n        <div className=\"p-6 space-y-6\">\n          {/* Quick Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card className=\"hover:shadow-md transition-shadow\" data-testid=\"card-calls-today\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Total Calls Today</p>\n                    <p className=\"text-3xl font-bold text-foreground mt-2\" data-testid=\"text-calls-today\">\n                      {statsLoading ? \"...\" : stats?.totalCallsToday || 0}\n                    </p>\n                    <p className=\"text-sm text-green-600 mt-1\">\n                      <TrendingUp className=\"inline h-3 w-3 mr-1\" />\n                      +12% from yesterday\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <Phone className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-md transition-shadow\" data-testid=\"card-upsells\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Successful Upsells</p>\n                    <p className=\"text-3xl font-bold text-foreground mt-2\" data-testid=\"text-upsells\">\n                      {statsLoading ? \"...\" : stats?.successfulUpsells || 0}\n                    </p>\n                    <p className=\"text-sm text-green-600 mt-1\">\n                      <TrendingUp className=\"inline h-3 w-3 mr-1\" />\n                      +8% from yesterday\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <TrendingUp className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-md transition-shadow\" data-testid=\"card-revenue\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Revenue Today</p>\n                    <p className=\"text-3xl font-bold text-foreground mt-2\" data-testid=\"text-revenue\">\n                      {statsLoading ? \"...\" : formatCurrency(stats?.revenueToday || 0)}\n                    </p>\n                    <p className=\"text-sm text-green-600 mt-1\">\n                      <TrendingUp className=\"inline h-3 w-3 mr-1\" />\n                      +15% from yesterday\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                    <DollarSign className=\"h-6 w-6 text-yellow-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-md transition-shadow\" data-testid=\"card-conversion\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Conversion Rate</p>\n                    <p className=\"text-3xl font-bold text-foreground mt-2\" data-testid=\"text-conversion\">\n                      {statsLoading ? \"...\" : `${stats?.conversionRate || 0}%`}\n                    </p>\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      <TrendingUp className=\"inline h-3 w-3 mr-1 rotate-180\" />\n                      -2% from yesterday\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                    <Percent className=\"h-6 w-6 text-purple-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Charts Section */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Sales Chart */}\n            <Card data-testid=\"card-sales-chart\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Sales Performance</CardTitle>\n                  <Select value={dateFilter} onValueChange={setDateFilter}>\n                    <SelectTrigger className=\"w-40\" data-testid=\"select-date-filter\">\n                      <SelectValue placeholder=\"Select period\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"7\">Last 7 days</SelectItem>\n                      <SelectItem value=\"30\">Last 30 days</SelectItem>\n                      <SelectItem value=\"90\">Last 3 months</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-[300px]\">\n                  {statsLoading ? (\n                    <div className=\"flex items-center justify-center h-full\">\n                      <div className=\"text-center text-muted-foreground\">\n                        <TrendingUp className=\"h-8 w-8 mx-auto mb-2\" />\n                        Loading chart...\n                      </div>\n                    </div>\n                  ) : (\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <LineChart data={filteredChartData}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis \n                          dataKey=\"date\" \n                          tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                        />\n                        <YAxis />\n                        <Tooltip \n                          formatter={(value) => [formatCurrency(Number(value)), \"Revenue\"]}\n                          labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { \n                            month: 'long', \n                            day: 'numeric',\n                            year: 'numeric'\n                          })}\n                        />\n                        <Line type=\"monotone\" dataKey=\"revenue\" stroke=\"hsl(var(--primary))\" strokeWidth={2} />\n                      </LineChart>\n                    </ResponsiveContainer>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Agent Performance */}\n            <Card data-testid=\"card-agent-performance\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Agent Leaderboard</CardTitle>\n                  <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-agents\">\n                    View All\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {performanceLoading ? (\n                    <div className=\"text-center text-muted-foreground py-8\">\n                      Loading performance data...\n                    </div>\n                  ) : (\n                    agentPerformance?.slice(0, 3).map((agent, index) => (\n                      <div key={agent.agent.id} className=\"flex items-center justify-between p-4 bg-card border border-border rounded-lg\" data-testid={`agent-performance-${index}`}>\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center text-white font-medium text-sm\">\n                            {getInitials(agent.agent.username)}\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-sm\" data-testid={`agent-name-${index}`}>\n                              {agent.agent.username}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {agent.callsHandled} calls • {agent.upsellsClosed} upsells\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-semibold text-green-600 dark:text-green-400\" data-testid={`agent-revenue-${index}`}>\n                            {formatCurrency(agent.revenue)}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">Revenue</p>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Recent Activity */}\n          <Card data-testid=\"card-recent-activity\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Recent Activity</CardTitle>\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-activity\">\n                  View All\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-4 p-4 hover:bg-secondary rounded-lg transition-colors\" data-testid=\"activity-item-0\">\n                  <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                    <TrendingUp className=\"h-4 w-4 text-green-600\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm text-foreground\">\n                      System update: Dashboard analytics refreshed\n                    </p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">Real-time data sync • Just now</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-4 p-4 hover:bg-secondary rounded-lg transition-colors\" data-testid=\"activity-item-1\">\n                  <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                    <Phone className=\"h-4 w-4 text-blue-600\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm text-foreground\">\n                      Welcome to Cultivasia CRM Dashboard\n                    </p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">System ready for call management • 1 minute ago</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":14261},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/setup.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\nimport { \n  Plus, \n  Edit, \n  Trash2, \n  Users, \n  Package, \n  Settings,\n  UserPlus,\n  Save,\n  X\n} from \"lucide-react\";\nimport { Product, User, insertProductSchema, insertUserSchema } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Redirect } from \"wouter\";\n\nconst productFormSchema = insertProductSchema;\nconst agentFormSchema = insertUserSchema.extend({\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype ProductFormData = z.infer<typeof productFormSchema>;\ntype AgentFormData = z.infer<typeof agentFormSchema>;\n\nexport default function Setup() {\n  const [showProductDialog, setShowProductDialog] = useState(false);\n  const [showAgentDialog, setShowAgentDialog] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const [editingAgent, setEditingAgent] = useState<User | null>(null);\n  const [activeTab, setActiveTab] = useState(\"products\");\n  \n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Redirect if not admin\n  if (user?.role !== 'admin') {\n    return <Redirect to=\"/\" />;\n  }\n\n  const { data: products, isLoading: productsLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: agents, isLoading: agentsLoading } = useQuery<User[]>({\n    queryKey: [\"/api/agents\"],\n  });\n\n  const productForm = useForm<ProductFormData>({\n    resolver: zodResolver(productFormSchema),\n    defaultValues: {\n      sku: \"\",\n      name: \"\",\n      price: \"0\",\n      units: 1,\n      isActive: true,\n    },\n  });\n\n  const agentForm = useForm<AgentFormData>({\n    resolver: zodResolver(agentFormSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      role: \"agent\",\n    },\n  });\n\n  const createProductMutation = useMutation({\n    mutationFn: async (productData: ProductFormData) => {\n      const response = await apiRequest('POST', '/api/products', productData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      toast({\n        title: \"Product created successfully\",\n      });\n      setShowProductDialog(false);\n      productForm.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to create product\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<ProductFormData> }) => {\n      const response = await apiRequest('PUT', `/api/products/${id}`, data);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      toast({\n        title: \"Product updated successfully\",\n      });\n      setShowProductDialog(false);\n      setEditingProduct(null);\n      productForm.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to update product\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createAgentMutation = useMutation({\n    mutationFn: async (agentData: Omit<AgentFormData, 'confirmPassword'>) => {\n      const response = await apiRequest('POST', '/api/agents', agentData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/agents'] });\n      toast({\n        title: \"Agent created successfully\",\n      });\n      setShowAgentDialog(false);\n      agentForm.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to create agent\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateAgentMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<User> }) => {\n      const response = await apiRequest('PUT', `/api/agents/${id}`, data);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/agents'] });\n      toast({\n        title: \"Agent updated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to update agent\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-PH', {\n      style: 'currency',\n      currency: 'PHP',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const handleCreateProduct = (data: ProductFormData) => {\n    createProductMutation.mutate(data);\n  };\n\n  const handleUpdateProduct = (data: ProductFormData) => {\n    if (editingProduct) {\n      updateProductMutation.mutate({\n        id: editingProduct.id,\n        data,\n      });\n    }\n  };\n\n  const handleCreateAgent = (data: AgentFormData) => {\n    const { confirmPassword, ...agentData } = data;\n    createAgentMutation.mutate(agentData);\n  };\n\n  const handleEditProduct = (product: Product) => {\n    setEditingProduct(product);\n    productForm.reset({\n      sku: product.sku,\n      name: product.name,\n      price: product.price,\n      units: product.units,\n      isActive: product.isActive,\n    });\n    setShowProductDialog(true);\n  };\n\n  const handleToggleProductStatus = (product: Product) => {\n    updateProductMutation.mutate({\n      id: product.id,\n      data: { isActive: !product.isActive },\n    });\n  };\n\n  const handleToggleAgentStatus = (agent: User) => {\n    updateAgentMutation.mutate({\n      id: agent.id,\n      data: { isActive: !agent.isActive },\n    });\n  };\n\n  const handleCloseProductDialog = () => {\n    setShowProductDialog(false);\n    setEditingProduct(null);\n    productForm.reset();\n  };\n\n  const handleCloseAgentDialog = () => {\n    setShowAgentDialog(false);\n    setEditingAgent(null);\n    agentForm.reset();\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        {/* Header */}\n        <header className=\"bg-white border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-foreground\">Setup</h2>\n              <p className=\"text-sm text-muted-foreground\">Manage products and team members</p>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Settings className=\"h-5 w-5 text-muted-foreground\" />\n            </div>\n          </div>\n        </header>\n\n        <div className=\"p-6\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-2 max-w-md\">\n              <TabsTrigger value=\"products\" data-testid=\"tab-products\">\n                <Package className=\"h-4 w-4 mr-2\" />\n                Products\n              </TabsTrigger>\n              <TabsTrigger value=\"agents\" data-testid=\"tab-agents\">\n                <Users className=\"h-4 w-4 mr-2\" />\n                Agents\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Products Tab */}\n            <TabsContent value=\"products\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Product Management</CardTitle>\n                    <Dialog open={showProductDialog} onOpenChange={setShowProductDialog}>\n                      <DialogTrigger asChild>\n                        <Button data-testid=\"button-add-product\">\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Add Product\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>\n                            {editingProduct ? \"Edit Product\" : \"Add New Product\"}\n                          </DialogTitle>\n                        </DialogHeader>\n                        <form \n                          onSubmit={productForm.handleSubmit(editingProduct ? handleUpdateProduct : handleCreateProduct)}\n                          className=\"space-y-4\"\n                        >\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"sku\">SKU</Label>\n                            <Input\n                              id=\"sku\"\n                              {...productForm.register(\"sku\")}\n                              placeholder=\"e.g., AC1, AP2\"\n                              data-testid=\"input-product-sku\"\n                            />\n                            {productForm.formState.errors.sku && (\n                              <p className=\"text-sm text-destructive\">\n                                {productForm.formState.errors.sku.message}\n                              </p>\n                            )}\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"name\">Product Name</Label>\n                            <Input\n                              id=\"name\"\n                              {...productForm.register(\"name\")}\n                              placeholder=\"Product name\"\n                              data-testid=\"input-product-name\"\n                            />\n                            {productForm.formState.errors.name && (\n                              <p className=\"text-sm text-destructive\">\n                                {productForm.formState.errors.name.message}\n                              </p>\n                            )}\n                          </div>\n\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"price\">Price (PHP)</Label>\n                              <Input\n                                id=\"price\"\n                                type=\"number\"\n                                step=\"0.01\"\n                                {...productForm.register(\"price\")}\n                                placeholder=\"0.00\"\n                                data-testid=\"input-product-price\"\n                              />\n                              {productForm.formState.errors.price && (\n                                <p className=\"text-sm text-destructive\">\n                                  {productForm.formState.errors.price.message}\n                                </p>\n                              )}\n                            </div>\n\n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"units\">Units</Label>\n                              <Input\n                                id=\"units\"\n                                type=\"number\"\n                                {...productForm.register(\"units\", { valueAsNumber: true })}\n                                placeholder=\"1\"\n                                data-testid=\"input-product-units\"\n                              />\n                              {productForm.formState.errors.units && (\n                                <p className=\"text-sm text-destructive\">\n                                  {productForm.formState.errors.units.message}\n                                </p>\n                              )}\n                            </div>\n                          </div>\n\n                          <div className=\"flex items-center space-x-2\">\n                            <Switch\n                              id=\"isActive\"\n                              checked={productForm.watch(\"isActive\")}\n                              onCheckedChange={(checked) => productForm.setValue(\"isActive\", checked)}\n                              data-testid=\"switch-product-active\"\n                            />\n                            <Label htmlFor=\"isActive\">Active Product</Label>\n                          </div>\n\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              onClick={handleCloseProductDialog}\n                              data-testid=\"button-cancel-product\"\n                            >\n                              <X className=\"h-4 w-4 mr-2\" />\n                              Cancel\n                            </Button>\n                            <Button\n                              type=\"submit\"\n                              disabled={createProductMutation.isPending || updateProductMutation.isPending}\n                              data-testid=\"button-save-product\"\n                            >\n                              <Save className=\"h-4 w-4 mr-2\" />\n                              {editingProduct ? \"Update\" : \"Create\"}\n                            </Button>\n                          </div>\n                        </form>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {productsLoading ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      Loading products...\n                    </div>\n                  ) : (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>SKU</TableHead>\n                          <TableHead>Name</TableHead>\n                          <TableHead>Price</TableHead>\n                          <TableHead>Units</TableHead>\n                          <TableHead>Status</TableHead>\n                          <TableHead>Actions</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {products?.map((product) => (\n                          <TableRow key={product.id} data-testid={`product-row-${product.id}`}>\n                            <TableCell className=\"font-medium\">{product.sku}</TableCell>\n                            <TableCell>{product.name}</TableCell>\n                            <TableCell>{formatCurrency(Number(product.price))}</TableCell>\n                            <TableCell>{product.units}</TableCell>\n                            <TableCell>\n                              <div className=\"flex items-center space-x-2\">\n                                <Switch\n                                  checked={product.isActive}\n                                  onCheckedChange={() => handleToggleProductStatus(product)}\n                                  data-testid={`switch-product-status-${product.id}`}\n                                />\n                                <Badge variant={product.isActive ? \"default\" : \"secondary\"}>\n                                  {product.isActive ? \"Active\" : \"Inactive\"}\n                                </Badge>\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleEditProduct(product)}\n                                data-testid={`button-edit-product-${product.id}`}\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Agents Tab */}\n            <TabsContent value=\"agents\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Agent Management</CardTitle>\n                    <Dialog open={showAgentDialog} onOpenChange={setShowAgentDialog}>\n                      <DialogTrigger asChild>\n                        <Button data-testid=\"button-add-agent\">\n                          <UserPlus className=\"h-4 w-4 mr-2\" />\n                          Add Agent\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Add New Agent</DialogTitle>\n                        </DialogHeader>\n                        <form \n                          onSubmit={agentForm.handleSubmit(handleCreateAgent)}\n                          className=\"space-y-4\"\n                        >\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"username\">Username</Label>\n                            <Input\n                              id=\"username\"\n                              {...agentForm.register(\"username\")}\n                              placeholder=\"Agent username\"\n                              data-testid=\"input-agent-username\"\n                            />\n                            {agentForm.formState.errors.username && (\n                              <p className=\"text-sm text-destructive\">\n                                {agentForm.formState.errors.username.message}\n                              </p>\n                            )}\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"password\">Password</Label>\n                            <Input\n                              id=\"password\"\n                              type=\"password\"\n                              {...agentForm.register(\"password\")}\n                              placeholder=\"Password\"\n                              data-testid=\"input-agent-password\"\n                            />\n                            {agentForm.formState.errors.password && (\n                              <p className=\"text-sm text-destructive\">\n                                {agentForm.formState.errors.password.message}\n                              </p>\n                            )}\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                            <Input\n                              id=\"confirmPassword\"\n                              type=\"password\"\n                              {...agentForm.register(\"confirmPassword\")}\n                              placeholder=\"Confirm password\"\n                              data-testid=\"input-agent-confirm-password\"\n                            />\n                            {agentForm.formState.errors.confirmPassword && (\n                              <p className=\"text-sm text-destructive\">\n                                {agentForm.formState.errors.confirmPassword.message}\n                              </p>\n                            )}\n                          </div>\n\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              onClick={handleCloseAgentDialog}\n                              data-testid=\"button-cancel-agent\"\n                            >\n                              <X className=\"h-4 w-4 mr-2\" />\n                              Cancel\n                            </Button>\n                            <Button\n                              type=\"submit\"\n                              disabled={createAgentMutation.isPending}\n                              data-testid=\"button-save-agent\"\n                            >\n                              <Save className=\"h-4 w-4 mr-2\" />\n                              Create Agent\n                            </Button>\n                          </div>\n                        </form>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {agentsLoading ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      Loading agents...\n                    </div>\n                  ) : (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Username</TableHead>\n                          <TableHead>Role</TableHead>\n                          <TableHead>Status</TableHead>\n                          <TableHead>Created</TableHead>\n                          <TableHead>Actions</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {agents?.map((agent) => (\n                          <TableRow key={agent.id} data-testid={`agent-row-${agent.id}`}>\n                            <TableCell className=\"font-medium\">{agent.username}</TableCell>\n                            <TableCell className=\"capitalize\">{agent.role}</TableCell>\n                            <TableCell>\n                              <div className=\"flex items-center space-x-2\">\n                                <Switch\n                                  checked={agent.isActive}\n                                  onCheckedChange={() => handleToggleAgentStatus(agent)}\n                                  data-testid={`switch-agent-status-${agent.id}`}\n                                />\n                                <Badge variant={agent.isActive ? \"default\" : \"secondary\"}>\n                                  {agent.isActive ? \"Active\" : \"Inactive\"}\n                                </Badge>\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              {new Date(agent.createdAt).toLocaleDateString()}\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex items-center space-x-2\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => {\n                                    // Reset password functionality could be added here\n                                    toast({\n                                      title: \"Reset password\",\n                                      description: \"Password reset functionality to be implemented\",\n                                    });\n                                  }}\n                                  data-testid={`button-reset-password-${agent.id}`}\n                                >\n                                  Reset Password\n                                </Button>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":24771},"client/src/pages/transactions.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { CsvImport } from \"@/components/csv-import\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { Search, TrendingUp, DollarSign, Upload } from \"lucide-react\";\nimport { Transaction } from \"@shared/schema\";\nimport { useState } from \"react\";\n\nexport default function Transactions() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [showConfirmationImport, setShowConfirmationImport] = useState(false);\n  const [showPromotionalImport, setShowPromotionalImport] = useState(false);\n\n  const { data: transactions, isLoading } = useQuery<Transaction[]>({\n    queryKey: [\"/api/transactions\"],\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-PH', {\n      style: 'currency',\n      currency: 'PHP',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatDateTime = (date: Date) => {\n    return new Intl.DateTimeFormat('en-PH', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    }).format(new Date(date));\n  };\n\n  const filteredTransactions = transactions?.filter(transaction => {\n    if (searchTerm === \"\") return true;\n    return (transaction.originalOrderSku || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n           (transaction.orderSku || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n           transaction.customerName.toLowerCase().includes(searchTerm.toLowerCase());\n  });\n\n  const totalRevenue = transactions?.reduce((sum, t) => sum + Number(t.revenue), 0) || 0;\n  const upsellCount = transactions?.filter(t => t.isUpsell).length || 0;\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        {/* Header */}\n        <header className=\"bg-white border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-foreground\">Transactions</h2>\n              <p className=\"text-sm text-muted-foreground\">Track all upsells and revenue</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search transactions...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 w-64\"\n                  data-testid=\"input-search-transactions\"\n                />\n              </div>\n              \n              {/* Confirmation Calls Import */}\n              <Dialog open={showConfirmationImport} onOpenChange={setShowConfirmationImport}>\n                <DialogTrigger asChild>\n                  <Button variant=\"outline\" data-testid=\"button-import-confirmation\">\n                    <Upload className=\"h-4 w-4 mr-2\" />\n                    Import Confirmation Calls\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle>Import Confirmation Calls (Upsell)</DialogTitle>\n                  </DialogHeader>\n                  <CsvImport \n                    callType=\"confirmation\"\n                    title=\"Import Confirmation Calls\"\n                    description=\"Upload CSV for confirmation calls (upsell opportunities). Required columns: DATE, NAME, PHONE, ORDER, PRICE\"\n                  />\n                </DialogContent>\n              </Dialog>\n\n              {/* Promotional Calls Import */}\n              <Dialog open={showPromotionalImport} onOpenChange={setShowPromotionalImport}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-import-promotional\">\n                    <Upload className=\"h-4 w-4 mr-2\" />\n                    Import Promotional Calls\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle>Import Promotional Calls (Retention)</DialogTitle>\n                  </DialogHeader>\n                  <CsvImport \n                    callType=\"promo\"\n                    title=\"Import Promotional Calls\" \n                    description=\"Upload CSV for promotional calls (retention campaigns). Required columns: DATE, NAME, PHONE, ORDER, PRICE\"\n                  />\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </header>\n\n        <div className=\"p-6 space-y-6\">\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Total Revenue</p>\n                    <p className=\"text-3xl font-bold text-foreground mt-2\" data-testid=\"text-total-revenue\">\n                      {formatCurrency(totalRevenue)}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <DollarSign className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Total Upsells</p>\n                    <p className=\"text-3xl font-bold text-foreground mt-2\" data-testid=\"text-total-upsells\">\n                      {upsellCount}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <TrendingUp className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Average Revenue</p>\n                    <p className=\"text-3xl font-bold text-foreground mt-2\" data-testid=\"text-average-revenue\">\n                      {formatCurrency(upsellCount > 0 ? totalRevenue / upsellCount : 0)}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                    <TrendingUp className=\"h-6 w-6 text-purple-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Transactions Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                Transaction History\n                <span className=\"text-sm font-normal text-muted-foreground\">\n                  {filteredTransactions?.length || 0} transactions\n                </span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  Loading transactions...\n                </div>\n              ) : filteredTransactions && filteredTransactions.length > 0 ? (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Date</TableHead>\n                      <TableHead>Original Order</TableHead>\n                      <TableHead>New Order</TableHead>\n                      <TableHead>Original Price</TableHead>\n                      <TableHead>New Price</TableHead>\n                      <TableHead>Revenue</TableHead>\n                      <TableHead>Type</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredTransactions.map((transaction) => (\n                      <TableRow key={transaction.id} data-testid={`transaction-row-${transaction.id}`}>\n                        <TableCell>{formatDateTime(transaction.createdAt)}</TableCell>\n                        <TableCell className=\"font-medium\">{transaction.originalOrderSku}</TableCell>\n                        <TableCell className=\"font-medium text-primary\">{transaction.newOrderSku}</TableCell>\n                        <TableCell>{formatCurrency(Number(transaction.originalPrice))}</TableCell>\n                        <TableCell>{formatCurrency(Number(transaction.newPrice))}</TableCell>\n                        <TableCell className=\"font-semibold text-green-600\">\n                          +{formatCurrency(Number(transaction.revenue))}\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={transaction.isUpsell ? \"default\" : \"secondary\"}>\n                            {transaction.isUpsell ? \"Upsell\" : \"Other\"}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <TrendingUp className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>No transactions found</p>\n                  <p className=\"text-sm\">Transactions will appear here when upsells are completed</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":10479},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}